#!/usr/bin/env node

const yargs = require("yargs");
const fs = require("fs");
let app_root = process.cwd();

// Make Root Files
let content_index = "// Initialize Application\nconst express = require('express');\nconst app = express();\nconst mongoose = require('mongoose');\nconst morgan = require('morgan');\nconst bodyParser = require('body-parser');\nconst dotenv = require('dotenv');\ndotenv.config();\nconst cookieParser = require('cookie-parser');\n\n// Connect Database\ntry {\n    mongoose.connect(process.env.MONGO_DATABASE_URI,\n        { \n            useNewUrlParser: true,\n            useUnifiedTopology: true\n        });    \n} catch(error) {\n    if(error.name == 'MongooseServerSelectionError') return console.log('Unable To Connect To The Database.');\n    return console.log(error);\n}\n\n// Bring The Route\nconst route = require('./route/app.js');\n\n// Initialize Middlewares\nif(process.env.APP_ENV == \"production\") {\n let accessLogStream = fs.createWriteStream(__dirname + '/logs/' + \"nitrologs.log\", {flags: 'a'});\n app.use(morgan({stream: accessLogStream}));\n}\nelse {\n app.use(morgan(\"dev\"));\n}\n\napp.use(bodyParser.json());\napp.set('view engine', 'ejs');\napp.use(cookieParser(process.env.APP_KEY));\n\n// Hit The Routes\napp.use('/', route);\n\n// Handle CSRF Token Errors\napp.use(function (err, req, res, next) {\n    if (err.code !== 'EBADCSRFTOKEN') return next(err)\n    res.status(403).render('errors/messages',{val_errors: 'Invalid CSRF Token.'}).clearCookie('_csrf');\n});\n\n// Listen To Requests\nconst port = process.env.PORT || 80;\napp.listen(port, () => {\n    console.log(`Node JS API Listening On PORT: ${port}`);\n});";
fs.appendFile(app_root + '/index.js', content_index, function (err) {
    if (err) console.log(err);
    console.log("Index File Created Successfully");
});
// Make Package Files
let content_package = "{\n  \"name\": \"@jaydadarkar/nitromvc\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A Simple MVC.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"nodemon index.js\",\n    \"test\": \"\",\n    \"key:generate\": \"node ./helpers/keygen.js\",\n    \"make:admin\": \"node ./helpers/makeadmin.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/jaydadarkar/nitromvc.git\"\n  },\n  \"author\": \"Jay Dadarkar <dadarkarjay@gmail.com> (https://jaydadarkar.com)\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"bcryptjs\": \"^2.4.3\",\n    \"body-parser\": \"^1.19.0\",\n    \"cookie-parser\": \"^1.4.5\",\n    \"crypto\": \"^1.0.1\",\n    \"csurf\": \"^1.11.0\",\n    \"dotenv\": \"^8.2.0\",\n    \"ejs\": \"^3.1.2\",\n    \"express\": \"^4.17.1\",\n    \"express-validator\": \"^6.4.1\",\n    \"jsonwebtoken\": \"^8.5.1\",\n    \"mongoose\": \"^5.9.11\",\n    \"morgan\": \"^1.10.0\",\n    \"nodemailer\": \"^6.4.6\",\n    \"nodemon\": \"^2.0.3\",\n    \"superagent\": \"^5.2.2\",\n    \"uuid\": \"^8.1.0\"\n  },\n  \"keywords\": [\n    \"web\",\n    \"app\",\n    \"application\",\n    \"framework\"\n  ]\n}";
fs.appendFile(app_root + '/package.json', content_package, function (err) {
    if (err) console.log(err);
    console.log("Package JSON File Created Successfully");
});
let content_env = "APP_NAME=NITROMVC\nAPP_URL=http://localhost\nAPP_ENV=testing\nPORT=80\nJWT_APP_KEY=\nAPP_KEY=\nREFRESH_JWT_INTERVAL=14400000\n\nDB=nitromvc\nMONGO_DATABASE_URI=mongodb://localhost:27017/nitromvc\nMONGO_DATABASE_URL=mongodb://localhost:27017/\n\nMAIL_SERVICE=smtp.mailtrap.io\nMAIL_USER=\nMAIL_PASSWORD=\nMAIL_FROM=\nMAIL_PORT=2525\n\nBULKGATE_API_URL=https://portal.bulkgate.com/api/1.0/simple/transactional\nBULKGATE_APP_ID=\nBULKGATE_API_KEY=\nBULKGATE_COUNTRY_CODE=";
fs.appendFile(app_root + '/.env', content_env, function (err) {
    if (err) console.log(err);
    console.log("ENV Created Successfully");
});
fs.appendFile(app_root + '/.env.example', content_env, function (err) {
    if (err) console.log(err);
    console.log("ENV Example Created Successfully");
});

// Make Routes
fs.mkdir(app_root + '/route', (err) => { 
    if (err) { 
        return console.error(err); 
    }
    else{
        let content_route = "// Route Head\nconst express = require('express');\nconst router = express.Router();\nconst csrf = require('csurf');\nconst csrfProtection = csrf({ cookie: true });\nconst cookieParser = require('cookie-parser');\nbodyParser = require('body-parser');\nparseForm = bodyParser.urlencoded({ extended: false });\nconst { check, validationResult } = require('express-validator');\n\n// Middlewares\nconst auth = require('../helpers/auth');\nconst isAdmin = require('../helpers/isAdmin');\n\n// Controllers\nconst controller = require('../controller/controller');\nconst auth_controller = require('../controller/auth.controller');\nconst admin_controller = require('../controller/admin.controller');\n\n// No CSRF Protection\nrouter.get('/api/', controller.api);\n\n// CSRF Protection\nrouter.get('/docs/', parseForm, csrfProtection, controller.docs);\nrouter.get('/', parseForm, csrfProtection, controller.index);\n\n// Auth\nrouter.get('/register/', parseForm, csrfProtection, auth_controller.register);\nrouter.post('/register/', parseForm, csrfProtection, [check('name').isString(), check('email').isEmail(), check('phone').isString(),check('phone').isLength({ min: 10, max: 10 }),\n                                                      check('password').isString(), check('password').isLength({ min: 8 })], auth_controller.register_user);\nrouter.get('/login/', csrfProtection, auth_controller.login);\nrouter.post('/login/', parseForm, csrfProtection, [check('email').isEmail(),check('password').isString(), check('password').isLength({ min: 8 })],\n                                                     auth_controller.login_user);\nrouter.get('/password/reset', parseForm, csrfProtection, auth_controller.password_reset);\nrouter.post('/password/reset', parseForm, csrfProtection, [check('email').isEmail()], auth_controller.password_reset_success);\nrouter.get('/logout/', parseForm, csrfProtection, auth_controller.logout);\nrouter.get('/reset/password/:token',parseForm, csrfProtection, [check('token').isString()],auth_controller.confirm_reset);\nrouter.post('/password/change/', parseForm, csrfProtection, [check('id').isString(),check('password').isString(), check('password').isLength({ min: 8 })], auth_controller.change_password);\n\n// User Dashboard\nrouter.get('/dashboard/', [parseForm, csrfProtection, auth], auth_controller.dashboard);\n\n// Admin\nrouter.get('/admin/', parseForm, csrfProtection, isAdmin, admin_controller.admin);\nrouter.get('/admin/users', parseForm, csrfProtection, isAdmin, admin_controller.users);\nrouter.get('/admin/user/:id', parseForm, csrfProtection, [check('id').isString()], isAdmin, admin_controller.user);\nrouter.post('/admin/user/update/', parseForm, csrfProtection, isAdmin, admin_controller.updateUser);\n\n// 404 Page\nrouter.get('*', parseForm, csrfProtection, function(req, res){\n    res.status(404).render('errors/404', { csrfToken: req.csrfToken() });\n  });\n\nmodule.exports = router;";
        fs.appendFile(app_root + '/route/app.js', content_route, function (err) {
            if (err) console.log(err);
            console.log("Route Created Successfully");
        });     
    }
});

// Make Controller
fs.mkdir(app_root + '/controller', (err) => { 
    if (err) { 
        return console.error(err); 
    }
    else{
        let content_controller = "const mongoose = require('mongoose');\nconst Users = require('../model/Users');\n\nconst route = require('../route/app');\n\nconst csrf = require('csurf');\nconst csrfProtection = csrf({ cookie: true });\n\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\nconst parseForm = bodyParser.urlencoded({ extended: false });\n\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst crypto = require('crypto');\n\nconst cookieEncrypt = require('../helpers/cookieEncrypt');\n\nconst cookieConfig = {\n    httpOnly: true,\n    maxAge: 604800000,\n    signed: true,\n    sameSite: true\n};\n\nconst mail = require('../helpers/mail');\nconst { check, validationResult } = require('express-validator');\n\n\nexports.api = (req,res) => {\n res.send('API');\n}\nexports.docs = (req,res) => {\n res.render('docs', { csrfToken: req.csrfToken() });\n}\n\n// HomePage\nexports.index = (req,res) => {\n    res.render('index', { csrfToken: req.csrfToken() });\n};";
        fs.appendFile(app_root + '/controller/controller.js', content_controller, function (err) {
            if (err) console.log(err);
            console.log("Controller Created Successfully");
        });     
        let content_auth_controller = "const mongoose = require('mongoose');\nconst controller = require('./controller');\nconst Users = require('../model/Users');\n\nconst route = require('../route/app');\n\nconst csrf = require('csurf');\nconst csrfProtection = csrf({ cookie: true });\n\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\nconst parseForm = bodyParser.urlencoded({ extended: false });\n\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst crypto = require(\"crypto\");\nconst {v4: uuidv4} = require('uuid');\n\nconst cookieEncrypt = require('../helpers/cookieEncrypt');\n\nconst cookieConfig = {\n    httpOnly: true,\n    maxAge: 604800000,\n    signed: true,\n    sameSite: true\n};\n\nconst mail = require('../helpers/mail');\nconst { check, validationResult } = require('express-validator');\n\n// User Dashboard\nexports.dashboard = async (req,res) => {\n\n    const id = req.user_id;\n    const user = await Users.findOne({_id: id}, function(err,user){\n        if(!err){\n            res.render('auth/dashboard', { \n                csrfToken:  req.csrfToken(),\n                user_detail: user\n             });\n        }\n    });\n}\n\n// Register User Layout\nexports.register = (req,res,next) => {\n    if(req.signedCookies.nitromvc_session){\n        res.redirect('/dashboard');\n    }\n    else{\n        res.render('auth/register', { csrfToken: req.csrfToken() });\n    }\n}\n\n// Register User\nexports.register_user = async (req,res) => {\n    try {\n\n        const val_errors = validationResult(req);\n        if (!val_errors.isEmpty()) {\n          return res.status(422).render('errors/422', {\n              val_errors: val_errors\n            });\n        }\n        \n        // Check Email Exists\n        let exists = await Users.find({email: req.body.email});\n        if(exists.length <= 0 || exists.length == undefined){\n            var salt = bcrypt.genSaltSync(10);\n            var hash = bcrypt.hashSync(req.body.password, salt);\n            let refresh_token = uuidv4();\n    \n            const User = new Users({\n                name: req.body.name,\n                phone: req.body.phone,\n                email: req.body.email,\n                password: hash,\n                user_type: 'default',\n                refresh_token: refresh_token,\n                reset_password_requested: false,\n                reset_password_token: null,\n                reset_password_expiry: null,\n                created_at: Date.now(),\n                updated_at: Date.now()\n            });\n    \n            await User.save((err,savedUser) => {\n                if(!err){\n                    let id = String(savedUser._id);\n                    const token = jwt.sign(\n                        {\n                            _id: cookieEncrypt.encrypt(id)\n                        },\n                        process.env.JWT_APP_KEY,\n                        {\n                            expiresIn: process.env.REFRESH_JWT_INTERVAL\n                        }\n                        );\n    \n                        // Send Mail\n                        if(process.env.MAIL_SERVICE && process.env.MAIL_FROM && process.env.MAIL_USER && process.env.MAIL_PASSWORD && savedUser.email){\n                        let mailOptions = {\n                            from: process.env.MAIL_FROM,\n                            to: savedUser.email,\n                            subject: 'Thank You For Registering With NITRO MVC',\n                            html: '<h3>Hello ' + savedUser.name + ',</h3><p>You Have Successfully Registered On NITRO MVC.<br />Thanks</p>'\n                          };\n    \n                        mail.sendMail(mailOptions, function(error, info){\n                            if (error) {\n                              console.log(error);\n                            }\n                          });\n                        }\n    \n                                res.cookie('nitromvc_session', token, cookieConfig).cookie('nitromvc_refresh', cookieEncrypt.encrypt(refresh_token), cookieConfig)\n                                .render('auth/dashboard', { \n                                    csrfToken:  req.csrfToken(),\n                                    user_detail: savedUser\n                                 });\n                    }\n            });\n        }\n        else{\n            res.render('errors/messages', {val_errors: \"This Email Is Already Taken.\"});\n        }\n\n    } catch (error) {\n        res.render('errors/messages', {val_errors: error});\n    }\n}\n\n// Login User Layout\nexports.login = (req,res,next) => {\n    if(req.signedCookies.nitromvc_session){\n        res.redirect('/dashboard');\n    }\n    else{\n        res.render('auth/login', { csrfToken: req.csrfToken() });\n    }\n}\n\n// Login User\nexports.login_user = async (req,res) => {\n\n        const val_errors = validationResult(req);\n        if (!val_errors.isEmpty()) {\n          return res.status(422).render('errors/422', {\n              val_errors: val_errors\n            });\n        }\n\n        // Find User\n        const user = await Users.findOne({email: req.body.email});\n        if(!user) return res.status(400).render('errors/messages', {val_errors: 'Email Or Password Does Not Match.'});\n        const validUser = await bcrypt.compare(req.body.password,user.password);\n        if(!validUser) return res.status(400).render('errors/messages', {val_errors: 'Email Or Password Does Not Match.'});\n\n        let id = String(user._id);\n        let refresh_token = user.refresh_token;\n\n        const token = jwt.sign(\n            {\n                _id: cookieEncrypt.encrypt(id)\n            },\n            process.env.JWT_APP_KEY,\n            {\n                expiresIn: process.env.REFRESH_JWT_INTERVAL\n            }\n            );\n            // Send The Cookies\n                    res.cookie('nitromvc_session', token, cookieConfig).cookie('nitromvc_refresh', cookieEncrypt.encrypt(refresh_token), cookieConfig)\n                    .render('auth/dashboard', { \n                        csrfToken:  req.csrfToken(),\n                        user_detail: user\n                     });\n        }\n\n// Reset Password Layout\nexports.password_reset = (req,res,next) => {\n    // Check if user is logged in.\n    if(req.signedCookies.nitromvc_session){\n        res.redirect('/dashboard');\n        next();\n    }\n    else{\n        res.render('auth/password_reset', { csrfToken: req.csrfToken() });\n    }\n}\n\n// User Enters Email And Confirms Reset Password\nexports.password_reset_success = async (req,res,next) => {\n    const val_errors = validationResult(req);\n    if (!val_errors.isEmpty()) {\n      return res.status(422).render('errors/422', {\n          val_errors: val_errors\n        });\n    }\n\n    // Find User\n    const user = await Users.findOne({email: req.body.email});\n    if(!user) return res.status(400).render('errors/messages', {val_errors: 'Email Does Not Exist.'});\n\n    let hash = cookieEncrypt.encrypt(uuidv4());\n    let expiry_date = new Date;\n    // 1 Hour\n    expiry_date.setHours(expiry_date.getHours() + 1);\n\n    user.reset_password_requested = true;\n    user.reset_password_token = hash;\n    user.reset_password_expiry = expiry_date;\n    user.updated_at = Date.now();\n\n    user.save((err) => {\n        if(err){\n            res.send('Error: ' + err);\n        }\n    });\n\n    // Send Mail\n    if(process.env.MAIL_SERVICE && process.env.MAIL_FROM && process.env.MAIL_USER && process.env.MAIL_PASSWORD && user.email){\n    let mailOptions = {\n        from: process.env.MAIL_FROM,\n        to: user.email,\n        subject: 'Password Reset Request',\n        html: '<h3>Hello ' + user.name + ',</h3><p>We Have Recieved A Password Reset Request On Your Behalf</p><br /><a target=\"_blank\" href=\"'+process.env.APP_URL+'/reset/password/'+ hash +'\">Reset My Password</a><br />Not You? You Can Ignore This E-mail. No Further Action Is Required.'\n      };\n\n    mail.sendMail(mailOptions, function(error, info){\n        if (error) {\n          console.log(error);\n        }\n      });\n    }\n\n    res.status(200).render('errors/messages', {val_errors:'A Password Reset Link Has Been Sent To Your Email.'});\n}\n\n// Check The Token And Render Password Form\nexports.confirm_reset = async (req,res,next) => {\n\n    const val_errors = validationResult(req.params);\n    if (!val_errors.isEmpty()) {\n      return res.status(422).render('errors/422', {\n          val_errors: val_errors\n        });\n    }\n\n    let token = req.params.token;\n    let user_id = cookieEncrypt.decrypt(token);\n    let user = await Users.findOne({reset_password_token: token});\n    if(!user) return res.status(500).render('errors/500');\n    if(user.reset_password_requested != true) return res.status(500).render('errors/500');\n    if(user.reset_password_expiry < Date.now()) return res.status(500).render('errors/500');\n\n    res.render('auth/change_password',{id: cookieEncrypt.encrypt(user.id), csrfToken: req.csrfToken()});\n}\n\n// Post Request Save The Password\nexports.change_password = async (req,res,next) => {\n    const val_errors = validationResult(req.params);\n    if (!val_errors.isEmpty()) {\n      return res.status(422).render('errors/422', {\n          val_errors: val_errors\n        });\n    }\n\n    id = cookieEncrypt.decrypt(req.body.id);\n    let user = await Users.findOne({_id: id});\n    if(!user) return res.status(500).render('errors/500');\n\n    var salt = bcrypt.genSaltSync(10);\n    var hash = bcrypt.hashSync(req.body.password, salt);\n\n    user.password = hash;\n    user.reset_password_requested = false;\n    user.reset_password_token = null;\n    user.reset_password_expiry = null;\n    user.updated_at = Date.now();\n    user.save();\n\n    // Send Mail\n    if(process.env.MAIL_SERVICE && process.env.MAIL_FROM && process.env.MAIL_USER && process.env.MAIL_PASSWORD){\n        let mailOptions = {\n            from: process.env.MAIL_FROM,\n            to: user.email,\n            subject: 'Your Password Has Been Reset',\n            html: '<h3>Hello ' + user.name + ',</h3><p>You Have Successfully Changed Your Password.<br />Thanks.'\n          };\n    \n        mail.sendMail(mailOptions, function(error, info){\n            if (error) {\n              console.log(error);\n            }\n          });\n        }\n    \n\nres.clearCookie('nitromvc_session').clearCookie('nitromvc_refresh').redirect('/');\n}\n\n// Logout\nexports.logout = async (req,res,next) => {\n    if(req.signedCookies.nitromvc_session){\n        res.clearCookie('nitromvc_session');\n    }\n    if(req.signedCookies.nitromvc_refresh){\n        res.clearCookie('nitromvc_refresh');\n    }\n    res.status(200).redirect('/');\n}";
        fs.appendFile(app_root + '/controller/auth.controller.js', content_auth_controller, function (err) {
            if (err) console.log(err);
            console.log("Auth Controller Created Successfully");
        });     
        let content_admin_controller = "const mongoose = require('mongoose');\nconst controller = require('./controller');\nconst Users = require('../model/Users');\n\nconst route = require('../route/app');\n\nconst csrf = require('csurf');\nconst csrfProtection = csrf({ cookie: true });\n\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\nconst parseForm = bodyParser.urlencoded({ extended: false });\n\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst crypto = require('crypto');\n\nconst cookieEncrypt = require('../helpers/cookieEncrypt');\nconst { check, validationResult } = require('express-validator');\n\nconst cookieConfig = {\n    httpOnly: true,\n    maxAge: 604800000,\n    signed: true,\n    sameSite: true\n};\n\n// Admin \nexports.admin = async (req,res) => {\n let id = await req.user_id;\n if(id){\n res.render('admin/index',{csrfToken: req.csrfToken()});\n}\n}\n\n// Get All Users\nexports.users = async (req,res) => {\n    await Users.find({}, function(err,Users){\n        if(!err){\n            res.render('admin/users', {csrfToken: req.csrfToken(), users: Users});\n        }\n        else{\n            res.render('errors/messages', {val_errors: err});\n        }\n    });    \n    \n}\n\n// Get One User\nexports.user = async (req,res) => {\n    let val_errors = validationResult(req.params.id);\n    if (!val_errors.isEmpty()) {\n      return res.status(422).render('errors/422', {\n          val_errors: val_errors\n        });\n    }\n\n    let user_id = String(req.params.id);\n    await Users.findOne({_id: user_id}, async function (err, User){\n        if(!err){\n            res.render('admin/user', {csrfToken: req.csrfToken(), user: User});\n        }\n        else{\n            res.render('errors/messages', {val_errors: err});\n        }\n    });\n}\n\n// Update One User\nexports.updateUser = async (req,res) => {\n    let user_id = String(req.body.user_id);\n    await Users.findOne({_id: user_id}, async function (err, user){\n        if(!err){\n            await Users.updateOne({_id: user._id},{\n                name: req.body.name,\n                email: req.body.email,\n                phone: req.body.phone,\n                updated_at: Date.now()\n            },function(err){\n                if(err){\n                    res.render('errors/messages', {val_errors: err});\n                }\n                else{\n                    res.render('errors/messages', {val_errors: 'User Updated'});\n                }\n            });\n        }\n    });\n}";
        fs.appendFile(app_root + '/controller/admin.controller.js', content_admin_controller, function (err) {
            if (err) console.log(err);
            console.log("Admin Controller Created Successfully");
        });     
    }
});

// Make Models
fs.mkdir(app_root + '/model', (err) => { 
    if (err) { 
        return console.error(err); 
    }
    else{
        let content_model = "const mongoose = require('mongoose');\n\nconst userSchema = mongoose.Schema({\n    name:{\n        type: String,\n        required: true,\n        min: 3,\n        max: 40\n    },\n    email:{\n        type: String,\n        required: true,\n        min: 6,\n        max: 100\n    },\n    phone:{\n        type: String,\n        required: true,\n        min: 10,\n        max: 13\n    },\n    password:{\n        type: String,\n        required: true,\n        max: 1024,\n        min: 8\n    },\n    user_type:{\n        type: String,\n        required: true\n    },\n    refresh_token:{\n        type: String,        \n    },\n    reset_password_requested:{\n        type: Boolean,        \n    },\n    reset_password_token:{\n        type: String,        \n    },\n    reset_password_expiry:{\n        type: Date,        \n    },\n    created_at:{\n        type: Date,\n        default: Date.now\n    },\n    updated_at:{\n        type: Date,\n        default: Date.now\n    }\n});\n\nmodule.exports = mongoose.model('Users', userSchema);";
        fs.appendFile(app_root + '/model/Users.js', content_model, function (err) {
            if (err) console.log(err);
            console.log("Model Created Successfully");
        });
    }
});

// Make helpers
    fs.mkdir(app_root + '/helpers', (err) => { 
    if (err) { 
        return console.error(err); 
    }
    else{
        // Make Auth
        let content_auth = "const jwt = require('jsonwebtoken');\nconst cookieEncrypt = require('./cookieEncrypt');\nconst Users = require('../model/Users');\nconst {v4: uuidv4} = require('uuid');\n\nconst cookieConfig = {\n  httpOnly: true,\n  maxAge: 604800000,\n  signed: true,\n  sameSite: true\n};\n\n// Auth Middleware\nmodule.exports = async function (req,res,next){\n  let token = req.signedCookies.nitromvc_session;\n  let refresh_token = req.signedCookies.nitromvc_refresh;\n\n  if (!token) return res.status(401).render('errors/401');  \n    if (token.startsWith('Bearer ')) {\n        token = token.slice(7, token.length);\n      }\n\n     await jwt.verify(token, process.env.JWT_APP_KEY, async function(err, decoded) {\n        if (err){\n          if(req.signedCookies.nitromvc_refresh){\n          // If JWT Expires, We will use the refresh token \n           refresh_token =  cookieEncrypt.decrypt(req.signedCookies.nitromvc_refresh);\n           await Users.findOne({refresh_token: refresh_token}, async function(err,user){\n            if(err) return console.log(err);\n            if(!user) return res.status(500).render('errors/500');\n\n            // Assign A New JWT Token\n            const token = await jwt.sign(\n              {\n                  _id: cookieEncrypt.encrypt(String(user._id))\n              },\n              process.env.JWT_APP_KEY,\n              {\n                  expiresIn: process.env.REFRESH_JWT_INTERVAL\n              }\n              );\n        // New Refresh Token\n        refresh_result = uuidv4();\n        req.user_id = String(user._id);\n        res.cookie('nitromvc_session', token, cookieConfig).cookie('nitromvc_refresh', cookieEncrypt.encrypt(refresh_result), cookieConfig).status(200);\n        Users.updateOne({_id: String(user._id)},{refresh_token: refresh_result}, function(err, data) {\n          if(err) return console.log(err);\n       });\n      });\n\n        }\n        else{\n          return res.status(500).render('errors/500');\n        }\n        }\n        else{\n          req.user_id = cookieEncrypt.decrypt(decoded._id);\n          res.status(200);  \n        }\n\n      });\n    next();\n}";
        fs.appendFile(app_root + '/helpers/auth.js', content_auth, function (err) {
            if (err) console.log(err);
            console.log("Auth Created Successfully");
        });
        // Make isAdmin
        let content_isadmin = "const jwt = require('jsonwebtoken');\nconst Users = require('../model/Users');\nconst cookieEncrypt = require('./cookieEncrypt');\nconst {v4: uuidv4} = require('uuid');\n\nconst cookieConfig = {\n  httpOnly: true,\n  maxAge: 604800000,\n  signed: true,\n  sameSite: true\n};\n\n// Admin Middleware\n// Similar To Auth Middleware\nmodule.exports = async function (req,res,next){\n    let token = req.signedCookies.nitromvc_session;\n    if (!token) return res.status(401).render('errors/401');\n    \n    if (token.startsWith('Bearer ')) {\n        token = token.slice(7, token.length);\n      }\n\n    await jwt.verify(token, process.env.JWT_APP_KEY, async function (err, decoded) {\n      if (err){\n        if(req.signedCookies.nitromvc_refresh){\n         refresh_token =  cookieEncrypt.decrypt(req.signedCookies.nitromvc_refresh);\n         await Users.findOne({refresh_token: refresh_token}, async function(err,user){\n          if(err) return console.log(err);\n          if(!user) return res.status(500).render('errors/500');\n          // Check Admin\n          if (user.user_type != 'admin') return res.status(400).render('errors/400');\n  \n          const token = await jwt.sign(\n            {\n                _id: cookieEncrypt.encrypt(String(user._id))\n            },\n            process.env.JWT_APP_KEY,\n            {\n                expiresIn: process.env.REFRESH_JWT_INTERVAL\n            }\n            );\n      refresh_result = uuidv4();\n      req.user_id = String(user._id);\n      res.cookie('nitromvc_session', token, cookieConfig).cookie('nitromvc_refresh', cookieEncrypt.encrypt(refresh_result), cookieConfig).status(200);\n      Users.updateOne({_id: String(user._id)},{refresh_token: refresh_result}, function(err, data) {\n        if(err) return console.log(err);\n     });\n    });\n\n      }\n      else{\n        return res.status(500).render('errors/500');\n      }\n      }\n    else{\n      let id = cookieEncrypt.decrypt(String(decoded._id));\n      await Users.findById(id, function (err, user) {\n        if (!user) {\n          res.status(401).render('errors/401');\n        }\n        else {\n          if (user.user_type != 'admin') {\n          res.status(400).render('errors/400');\n        }\n        else{\n          req.user_id = user._id;\n          \n        }\n      }\n      });\n    }\n  });\nnext();    \n}";
        fs.appendFile(app_root + '/helpers/isAdmin.js', content_isadmin, function (err) {
                    if (err) console.log(err);
                    console.log("isAdmin Created Successfully");
        });
        // Make KeyGen
        let content_keygen = "const fs = require('fs');\nconst crypto = require('crypto');\n\nlet configfile = '.env';\nfs.readFile(configfile, 'utf8', function (err,data) {\n   if (err) {\n     return console.log(err);\n   }\n\n   let result = '';\n   let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n   let charactersLength = characters.length;\n   for( var i = 0; i < 32; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n   }\n   let result_app_key = 'APP_KEY=' + result;\n   \n   \n   let jwt_app_key = crypto.randomBytes(16).toString('hex');\n   let result_jwt_app_key = 'JWT_APP_KEY=' + jwt_app_key;\n   \n   var replace_this = data.replace(/JWT_APP_KEY=/g, result_jwt_app_key).replace(/APP_KEY=/g, result_app_key);\n   \n   fs.writeFile(configfile, replace_this, 'utf8', function (err) {\n      if (!err){\n         console.log('APP KEYS GENERATED SUCCESSFULLY');\n      }\n      else{\n         return console.log(err);\n      }\n   });   \n   \n});";
        fs.appendFile(app_root + '/helpers/keygen.js', content_keygen, function (err) {
                    if (err) console.log(err);
                    console.log("KeyGen Created Successfully");
        });    
        // Make CookieEncrypt
        let content_cookie = "const crypto = require('crypto');\nconst ENCRYPTION_KEY = process.env.APP_KEY;\nconst IV_LENGTH = 16;\n\nfunction encrypt(text) {\n    let iv = crypto.randomBytes(IV_LENGTH);\n    let cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(ENCRYPTION_KEY), iv);\n    let encrypted = cipher.update(text);\n   \n    encrypted = Buffer.concat([encrypted, cipher.final()]);\n   \n    return iv.toString('hex') + ':' + encrypted.toString('hex');\n   }\n   \n   function decrypt(text) {\n    try{\n        let textParts = text.split(':');\n        let iv = Buffer.from(textParts.shift(), 'hex');\n        let encryptedText = Buffer.from(textParts.join(':'), 'hex');\n        let decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(ENCRYPTION_KEY), iv);\n        let decrypted = decipher.update(encryptedText);\n       \n        decrypted = Buffer.concat([decrypted, decipher.final()]);\n       \n        return decrypted.toString();            \n    }\n    catch(err){\n        console.log(err);\n    }\n   }\n\nmodule.exports = { decrypt, encrypt };";
        fs.appendFile(app_root + '/helpers/cookieEncrypt.js', content_cookie, function (err) {
                    if (err) console.log(err);
                    console.log("CookieEncrupt Created Successfully");
        });    
        // Make Admin
        let content_admin = "let email = process.env.npm_config_name;\nif(email == undefined) return console.log('Email Is Missing.');\nif(email == null) return console.log('Email Is Missing.');\n\nvar MongoClient = require('mongodb').MongoClient;\nconst dotenv = require('dotenv');\ndotenv.config();\nvar url = process.env.MONGO_DATABASE_URL;\n\nMongoClient.connect(url, { useUnifiedTopology: true }, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(process.env.DB);\n  var myquery = { email: email };\n  var newvalues = { $set: {user_type: 'admin'} };\n  dbo.collection('users').findOne({email: email}, function(err,user){\n      if(user != null){\n        dbo.collection('users').updateOne(myquery, newvalues, function(err, res) {\n            if (err) throw err;\n            console.log(email + ' is now an admin.');\n            db.close();\n          });\n      }\n      else{\n          console.log('No User Found');\n          db.close();\n        }\n  });\n  \n});";
        fs.appendFile(app_root + '/helpers/makeadmin.js', content_admin, function (err) {
                    if (err) console.log(err);
                    console.log("Make Admin Created Successfully");
        });    
        // Make Mail
        let content_mail = "const nodemailer = require('nodemailer');\n\nmodule.exports = nodemailer.createTransport({\n    host: process.env.MAIL_SERVICE,\n    port: process.env.MAIL_PORT,\n    auth: {\n      user: process.env.MAIL_USER,\n      pass: process.env.MAIL_PASSWORD\n    }\n  });";
        fs.appendFile(app_root + '/helpers/mail.js', content_mail, function (err) {
                    if (err) console.log(err);
                    console.log("Mail Created Successfully");
        });    
    }
});

// Make Views
fs.mkdir(app_root + '/views', (err) => { 
    if (err) { 
        return console.error(err); 
    }
    else{
        let content_index = "<%- include('includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover text-center\">\n    <h1 class=\"cover-heading\">NITRO MVC</h1>\n    <p class=\"lead\">A SIMPLE MVC.</p>\n    <p class=\"lead\">\n    </p>\n  </main>\n<%- include('includes/footer'); -%>";
        fs.appendFile(app_root + '/views/index.ejs', content_index, function (err) {
            if (err) console.log(err);
            console.log("View Index Created Successfully");
        });
        let content_docs = "<%- include('includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover text-center\">\n    <h1 class=\"cover-heading\">NITRO MVC</h1>\n    <p class=\"lead\">A SIMPLE MVC.</p><h3>DOCUMENTATION</h3>\n    <p class=\"lead\">\n    </p>\n  </main>\n<%- include('includes/footer'); -%>";
        fs.appendFile(app_root + '/views/docs.ejs', content_docs, function (err) {
            if (err) console.log(err);
            console.log("Docs Created Successfully");
        });
        fs.mkdir(app_root + '/views/errors', (err) => { 
            if (err) { 
            }
            else{
                let content_400 = "<%- include('head'); -%>\n  <main role=\"main\" class=\"inner cover text-center\">\n    <h1 class=\"cover-heading\">That's A 400.</h1>\n    <p class=\"lead\">Sorry, But Do Not Have Access Over Here.</p>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/errors/400.ejs', content_400, function (err) {
                    if (err) console.log(err);
                    console.log("View 400 Created Successfully");
                });
                let content_401 = "<%- include('head'); -%>\n  <main role=\"main\" class=\"inner cover text-center\">\n    <h1 class=\"cover-heading\">That's A 401.</h1>\n    <p class=\"lead\">You Are Not Authorized To Be Here.</p>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/errors/401.ejs', content_401, function (err) {
                    if (err) console.log(err);
                    console.log("View 401 Created Successfully");
                });
                let content_404 = "<%- include('head'); -%>\n  <main role=\"main\" class=\"inner cover text-center\">\n    <h1 class=\"cover-heading\">That's A 404.</h1>\n    <p class=\"lead\">We Could Not Find The Page You Were Looking For.</p>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/errors/404.ejs', content_404, function (err) {
                    if (err) console.log(err);
                    console.log("View 404 Created Successfully");
                });
                let content_422 = "<%- include('head'); -%>\n  <main role=\"main\" class=\"inner cover text-center\">\n    <h1 class=\"cover-heading\">That's A 422.</h1>\n    <p class=\"lead\">This Request Is Unprocessable.</p>\n    <% val_errors.errors.forEach(function (val_error) { %>\n        <p class=\"lead\"><%= val_error.msg %> for <%= val_error.param %>.</p>\n    <% }) %>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/errors/422.ejs', content_422, function (err) {
                    if (err) console.log(err);
                    console.log("View 422 Created Successfully");
                });
                let content_500 = "<%- include('head'); -%>\n  <main role=\"main\" class=\"inner cover text-center\">\n    <h1 class=\"cover-heading\">That's A 500.</h1>\n    <p class=\"lead\">Some Error Occured.</p>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/errors/500.ejs', content_500, function (err) {
                    if (err) console.log(err);
                    console.log("View 500 Created Successfully");
                });
                let content_head = "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    <meta name=\"description\" content=\"A Simple MVC.\">\n    <meta name=\"author\" content=\"Jay Dadarkar\">\n    <title>NITRO MVC BY JAY DADARKAR</title>\n\n    <!-- Bootstrap core CSS -->\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\">\n  </head>\n  <body>\n\n    \n\n    <div class=\"cover-container d-flex w-100 h-100 p-3 mx-auto flex-column\">\n      <nav class=\"navbar navbar-expand-lg navbar-dark fixed-top bg-success\">\n        <a class=\"d-block d-lg-none navbar-brand\" href=\"<%- process.env.APP_URL %>\"><%- process.env.APP_NAME %></a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo01\" aria-controls=\"navbarTogglerDemo01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\n          <a class=\"d-none d-lg-block navbar-brand\" href=\"<%- process.env.APP_URL %>\"><%- process.env.APP_NAME %></a>\n          <ul class=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n            <li class=\"nav-item\">\n              <a class=\"nav-link active\" href=\"<%- process.env.APP_URL %>\">HOME</a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link active\" href=\"<% process.env.APP_URL %>/docs/\">DOCUMENTATION</a>\n            </li>\n</ul>\n          <ul class=\"navbar-nav mr-0 mt-2 mt-lg-0\">\n            <li class=\"nav-item dropdown\">\n              <a class=\"nav-link dropdown-toggle active\" href=\"#\" id=\"navbarDropdownMenuLink\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                MY ACCOUNT\n              </a>\n              <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/login/\">LOGIN</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/register/\">REGISTER</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/dashboard\">DASHBOARD</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/admin\">ADMIN</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/logout\">LOGOUT</a>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <br /><br />";
                fs.appendFile(app_root + '/views/errors/head.ejs', content_head, function (err) {
                    if (err) console.log(err);
                    console.log("View Head Created Successfully");
                });
                let content_messages = "<%- include('head'); -%>\n  <main role=\"main\" class=\"inner cover text-center\">\n    <h1 class=\"cover-heading\">Flash Message.</h1>\n        <p class=\"lead\"><%= val_errors %>.</p>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/errors/messages.ejs', content_messages, function (err) {
                    if (err) console.log(err);
                    console.log("View messages Created Successfully");
                });
            }
        });
        fs.mkdir(app_root + '/views/includes', (err) => { 
            if (err) { 
                return console.error(err);
            }
            else{
                let content_header = "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    <meta name=\"description\" content=\"A Simple MVC.\">\n    <meta name=\"author\" content=\"Jay Dadarkar\">\n    <title>NITRO MVC BY JAY DADARKAR</title>\n\n    <!-- Bootstrap core CSS -->\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" >\n    <!-- CSRF Token -->\n    <meta name=\"csrf-token\" content=\"<% csrfToken %>\"/>\n  </head>\n  <body>\n\n    <div class=\"cover-container d-flex w-100 h-100 p-3 mx-auto flex-column\">\n      <nav class=\"navbar navbar-expand-lg navbar-dark fixed-top bg-success\">\n        <a class=\"d-block d-lg-none navbar-brand\" href=\"<%- process.env.APP_URL %>\"><%- process.env.APP_NAME %></a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo01\" aria-controls=\"navbarTogglerDemo01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\n          <a class=\"d-none d-lg-block navbar-brand\" href=\"<%- process.env.APP_URL %>\"><%- process.env.APP_NAME %></a>\n          <ul class=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n            <li class=\"nav-item\">\n              <a class=\"nav-link active\" href=\"<%- process.env.APP_URL %>\">HOME</a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link active\" href=\"<% process.env.APP_URL %>/docs/\">DOCUMENTATION</a>\n            </li>\n</ul>\n          <ul class=\"navbar-nav mr-0 mt-2 mt-lg-0\">\n            <li class=\"nav-item dropdown\">\n              <a class=\"nav-link dropdown-toggle active\" href=\"#\" id=\"navbarDropdownMenuLink\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                MY ACCOUNT\n              </a>\n              <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/login/\">LOGIN</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/register/\">REGISTER</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/dashboard\">DASHBOARD</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/admin\">ADMIN</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/logout\">LOGOUT</a>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <br /><br />";
                fs.appendFile(app_root + '/views/includes/header.ejs', content_header, function (err) {
                    if (err) console.log(err);
                    console.log("View Header Created Successfully");
                });
                let content_footer = "<footer class=\"mastfoot text-center mt-auto\">\n    <div class=\"inner\">\n      <p>NITRO MVC by <a href=\"https://jaydadarkar.com/\">Jay Dadarkar</a>.</p>\n    </div>\n  </footer>\n</div>\n\n<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"></script>\n<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"></script>\n</body>\n</html>";
                fs.appendFile(app_root + '/views/includes/footer.ejs', content_footer, function (err) {
                    if (err) console.log(err);
                    console.log("View Index Created Successfully");
                });                
            }
        });
        fs.mkdir(app_root + '/views/auth', (err) => { 
            if (err) { 
                return console.error(err);
            }
            else{
                let content_dashboard = "<%- include('../includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover\">\n    <h1 class=\"cover-heading text-center\">DASHBOARD</h1>\n    <div class=\"row text-center\">\n    <div class=\"col-12\">\n      <p class=\"lead\">\n        User Id: <%- user_detail._id %><br />\n        Name: <%- user_detail.name %><br />\n        Email: <%- user_detail.email %><br />\n        User Role: <%- user_detail.user_type %><br />\n      </p>  \n    </div>\n  </div>\n    </div>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/auth/dashboard.ejs', content_dashboard, function (err) {
                    if (err) console.log(err);
                    console.log("View Dashboard Created Successfully");
                });
                let content_change_password = "<%- include('../includes/header'); -%>\n  <main role=\"main\" class=\"inner cover\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-12 col-lg-4\">\n        <h1 class=\"cover-heading text-center\">ENTER NEW PASSWORD</h1>\n        <p class=\"lead\">\n            <form action=\"<% process.env.APP_URL %>/password/change/\" method=\"POST\">\n              <input type=\"hidden\" name=\"id\" value=\"<%- id %>\">\n              <input type=\"hidden\" name=\"_csrf\" value=\"<%- csrfToken %>\">\n                <div class=\"form-group\">\n                    <label for=\"password\">Password</label>\n                    <input name=\"password\" type=\"password\" class=\"form-control\" id=\"password\" aria-describedby=\"password\" placeholder=\"Enter Password\">\n                </div>\n                <div class=\"text-center\">\n                  <button class=\"btn btn-success\" type=\"submit\">Reset Password</button>\n                </div>\n              </form>\n        </p>\n      </div>\n    </div>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/auth/change_password.ejs', content_change_password, function (err) {
                    if (err) console.log(err);
                    console.log("View Change Password Created Successfully");
                });
                let content_login = "<%- include('../includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-12 col-lg-4\">\n        <h1 class=\"cover-heading text-center\">LOGIN</h1>\n        <p class=\"lead\">\n            <form action=\"<% process.env.APP_URL %>/login/\" method=\"POST\">\n              <input type=\"hidden\" name=\"_csrf\" value=\"<%- csrfToken %>\">\n                <div class=\"form-group\">\n                    <label for=\"email\">Email</label>\n                    <input name=\"email\" type=\"email\" class=\"form-control\" id=\"email\" aria-describedby=\"email\" placeholder=\"Enter Email\">\n                    <small id=\"email\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"password\">Password</label>\n                    <input name=\"password\" type=\"password\" class=\"form-control\" id=\"password\" aria-describedby=\"password\" placeholder=\"Enter Password\">\n                </div>\n                <div class=\"text-center\">\n                  <a href=\"/register/\">New User? Register</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n                  <a href=\"/password/reset/\">Forgot Password</a>\n                  <br />\n                  <br />\n                  <button class=\"btn btn-success\" type=\"submit\">Login</button>\n                </div>\n              </form>\n        </p>    \n      </div>\n    </div>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/auth/login.ejs', content_login, function (err) {
                    if (err) console.log(err);
                    console.log("View Login Created Successfully");
                });
                let content_password_reset = "<%- include('../includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-12 col-lg-4\">\n        <h1 class=\"cover-heading text-center\">RESET PASSWORD</h1>\n        <p class=\"lead\">\n            <form action=\"<% process.env.APP_URL %>/password/reset\" method=\"POST\">\n              <input type=\"hidden\" name=\"_csrf\" value=\"<%- csrfToken %>\">\n                <div class=\"form-group\">\n                    <label for=\"email\">Email</label>\n                    <input name=\"email\" type=\"email\" class=\"form-control\" id=\"email\" aria-describedby=\"email\" placeholder=\"Enter Email\">\n                    <small id=\"email\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                </div>\n                <div class=\"text-center\">\n                  <button class=\"btn btn-success\" type=\"submit\">Reset Password</button>\n                  <p>(Send Me An Email With Password Reset Link)</p>  \n                </div>\n              </form>\n        </p>\n        </div>\n      </div>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/auth/password_reset.ejs', content_password_reset, function (err) {
                    if (err) console.log(err);
                    console.log("View Rassword Reset Created Successfully");
                });
                let content_register = "<%- include('../includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-12 col-lg-4\">\n        <h1 class=\"cover-heading text-center\">REGISTER</h1>\n        <p class=\"lead\">\n            <form action=\"<% process.env.APP_URL %>/register/\" method=\"POST\">\n              <input type=\"hidden\" name=\"_csrf\" value=\"<%- csrfToken %>\">\n\n                <div class=\"form-group\">\n                    <label for=\"name\">Name</label>\n                    <input required name=\"name\" type=\"text\" class=\"form-control\" id=\"name\" aria-describedby=\"name\" placeholder=\"Enter Name\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"phone\">Phone</label>\n                    <input required name=\"phone\" type=\"number\" class=\"form-control\" id=\"phone\" aria-describedby=\"phone\" placeholder=\"Enter Phone\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"email\">Email</label>\n                    <input required name=\"email\" type=\"email\" class=\"form-control\" id=\"email\" aria-describedby=\"email\" placeholder=\"Enter Email\">\n                    <small id=\"email\" class=\"form-text text-muted\">We'll never share your email / phone with anyone else.</small>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"password\">Password</label>\n                    <input required name=\"password\" type=\"password\" class=\"form-control\" id=\"password\" aria-describedby=\"password\" placeholder=\"Enter Password\">\n                </div>\n                <div class=\"text-center\">\n                  <a href=\"/login/\">Already A User? Login</a>\n                  <br />\n                  <br />\n                  <button class=\"btn btn-success\" type=\"submit\">Register</button>\n                </div>\n              </form>\n        </p>\n      </div>\n    </div>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/auth/register.ejs', content_register, function (err) {
                    if (err) console.log(err);
                    console.log("View Register Created Successfully");
                });                                        
            }
        });
        fs.mkdir(app_root + '/views/admin', (err) => { 
            if (err) { 
                return console.error(err);
            }
            else{
                let content_admin = "<%- include('../includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover text-center\">\n    <%- include('adminnav'); -%>\n\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/admin/index.ejs', content_admin, function (err) {
                    if (err) console.log(err);
                    console.log("View Admin Index Created Successfully");
                });        
            }
            let content_admin_nav = "<div class=\"text-center\">\n    <a href=\"/admin/users\" class=\"btn btn-dark\">USERS</a>\n</div>\n<hr />";
            fs.appendFile(app_root + '/views/admin/adminnav.ejs', content_admin_nav, function (err) {
                if (err) console.log(err);
                console.log("View Admin Nav Created Successfully");
            });
            let content_user = "<%- include('../includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover\">\n    <%- include('adminnav'); -%>\n    <h1 class=\"cover-heading text-center\">UPDATE USER</h1>\n    <div class=\"row justify-content-center\">\n      <div class=\"col-4\">\n        <p class=\"lead\">\n          <form action=\"<% process.env.APP_URL %>/admin/user/update\" method=\"POST\">\n            <input type=\"hidden\" name=\"_csrf\" value=\"<%- csrfToken %>\">\n            <input name=\"user_id\" type=\"hidden\" value=\"<%- user._id %>\">\n              <div class=\"form-group\">\n                  <label for=\"name\">User Name</label>\n                  <input required name=\"name\" type=\"text\" class=\"form-control\" id=\"name\" aria-describedby=\"name\" placeholder=\"Enter Name\" value=\"<%- user.name %>\">\n              </div>\n              <div class=\"form-group\">\n                  <label for=\"email\">Email</label>\n                  <input required name=\"email\" type=\"text\" class=\"form-control\" id=\"email\" aria-describedby=\"email\" placeholder=\"Enter Email\" value=\"<%- user.email %>\">\n              </div>\n              <div class=\"form-group\">\n                  <label for=\"phone\">Phone</label>\n                  <input required name=\"phone\" type=\"text\" class=\"form-control\" id=\"phone\" aria-describedby=\"phone\" placeholder=\"Enter Phone\" value=\"<%- user.phone %>\">\n              </div>\n              <br />\n              <div class=\"text-center\">\n                <button class=\"btn btn-success\" type=\"submit\">Update User</button>\n              </div>\n            </form>\n      </p>  \n      </div>\n    </div>\n  </main>\n<%- include('../includes/footer'); -%>";
            fs.appendFile(app_root + '/views/admin/user.ejs', content_user, function (err) {
                if (err) console.log(err);
                console.log("View Admin User Created Successfully");
            });
            let content_users = "<%- include('../includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover text-center\">\n    <%- include('adminnav'); -%>\n    <h1>USERS</h1>\n    <table class=\"table table-bordered text-dark table-responsive\">\n        <tr>\n            <th>USER ID</th>\n            <th>NAME</th>\n            <th>PHONE</th>\n            <th>EMAIL</th>\n            <th>TYPE</th>\n            <th>CREATED AT</th>\n            <th>UPDATED AT</th>\n        </tr>\n        <% users.forEach(function (user) { %>\n            <tr>\n                <td><a href=\"<% process.env.APP_URL %>/admin/user/<%= user._id %>\"><%= user._id %></a></td>\n                <td><%= user.name %></td>\n                <td><%= user.phone %></td>\n                <td><%= user.email %></td>\n                <td><%= user.user_type %></td>\n                <td><%= user.created_at %></td>\n                <td><%= user.updated_at %></td>\n            </tr>\n        <% }) %>\n    </table>\n  </main>\n<%- include('../includes/footer'); -%>";
            fs.appendFile(app_root + '/views/admin/users.ejs', content_users, function (err) {
                if (err) console.log(err);
                console.log("View Admin Users Created Successfully");
            });
        });
    }
});