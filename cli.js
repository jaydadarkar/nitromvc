#!/usr/bin/env node

const yargs = require("yargs");
const fs = require("fs");
let app_root = process.cwd();

console.log(`
    =========== NITRO MVC ===========
    =================================
   |    BUILDING YOUR APPLICATION    |
    =================================
       Rome Was Not Built In A Day.
   But With Nitro MVC, Your App Can Be.
`);

// Make Root Files
let content_index = "// Initialize Application\nconst fs = require('fs');\nconst express = require('express');\nconst app = express();\nconst mongoose = require('mongoose');\nconst morgan = require('morgan');\nconst bodyParser = require('body-parser');\nconst dotenv = require('dotenv');\ndotenv.config();\nconst cookieParser = require('cookie-parser');\n\n// Connect Database\ntry {\n    mongoose.connect(process.env.MONGO_DATABASE_URI,\n        { \n            useNewUrlParser: true,\n            useUnifiedTopology: true\n        });    \n} catch(error) {\n    if(error.name == 'MongooseServerSelectionError') return console.log('Unable To Connect To The Database.');\n    return console.log(error);\n}\n\n// Bring The Route\nconst route = require('./route/app.js');\n\n// Initialize Middlewares\nif(process.env.APP_ENV == \"production\") {\n let accessLogStream = fs.createWriteStream(__dirname + '/storage/logs/' + \"nitrologs.log\", {flags: 'a'});\n app.use(morgan(\"combined\",{stream: accessLogStream}));\n}\nelse {\n app.use(morgan(\"dev\"));\n}\n\napp.use(bodyParser.json());\napp.set('view engine', 'ejs');\napp.use(cookieParser(process.env.APP_KEY));\n\n//Static Files\napp.use(express.static('storage/public'));\n\n// Hit The Routes\napp.use('/', route);\n\n// Handle CSRF Token Errors\napp.use(function (err, req, res, next) {\n    if (err.code !== 'EBADCSRFTOKEN') return next(err)\n    res.status(403).render('errors/messages',{val_errors: 'Invalid CSRF Token.'}).clearCookie('_csrf');\n});\n\n// Listen To Requests\nconst port = process.env.PORT || 80;\napp.listen(port, () => {\n    console.log(`Node JS API Listening On PORT: ${port}`);\n});";
fs.appendFile(app_root + '/index.js', content_index, function (err) {
    if (err) console.log(err);
});
// Make Package Files
let content_package = "{\n  \"name\": \"@jaydadarkar/nitromvc\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A Simple MVC.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"nodemon index.js\",\n    \"test\": \"\",\n    \"key:generate\": \"node ./helpers/keygen.js\",\n    \"make:admin\": \"node ./helpers/makeadmin.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/jaydadarkar/nitromvc.git\"\n  },\n  \"author\": \"Jay Dadarkar <dadarkarjay@gmail.com> (https://jaydadarkar.com)\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@google-cloud/storage\": \"^5.0.1\",\n    \"@jaydadarkar/nitrocore\": \"^1.0.0\",\n    \"aws-sdk\": \"^2.691.0\",\n    \"bcryptjs\": \"^2.4.3\",\n    \"body-parser\": \"^1.19.0\",\n    \"cookie-parser\": \"^1.4.5\",\n    \"crypto\": \"^1.0.1\",\n    \"csurf\": \"^1.11.0\",\n    \"dotenv\": \"^8.2.0\",\n    \"ejs\": \"^3.1.2\",\n    \"express\": \"^4.17.1\",\n    \"express-validator\": \"^6.4.1\",\n    \"jsonwebtoken\": \"^8.5.1\",\n    \"mongoose\": \"^5.9.11\",\n    \"morgan\": \"^1.10.0\",\n    \"multer\": \"^1.4.2\",\n    \"nodemailer\": \"^6.4.6\",\n    \"nodemon\": \"^2.0.3\",\n    \"superagent\": \"^5.2.2\",\n    \"uuid\": \"^8.1.0\"\n  },\n  \"keywords\": [\n    \"web\",\n    \"app\",\n    \"application\",\n    \"framework\"\n  ]\n}";
fs.appendFile(app_root + '/package.json', content_package, function (err) {
    if (err) console.log(err);
});
let content_env = "APP_NAME=NITROMVC\nAPP_URL=http://localhost\nAPP_ENV=testing\nPORT=80\nJWT_APP_KEY=\nAPP_KEY=\nREFRESH_JWT_INTERVAL=14400000\n\nDB=nitromvc\nMONGO_DATABASE_URI=mongodb://localhost:27017/nitromvc\nMONGO_DATABASE_URL=mongodb://localhost:27017/\n\nMAIL_SERVICE=smtp.mailtrap.io\nMAIL_USER=\nMAIL_PASSWORD=\nMAIL_FROM=\nMAIL_PORT=2525\n\nBULKGATE_API_URL=https://portal.bulkgate.com/api/1.0/simple/transactional\nBULKGATE_APP_ID=\nBULKGATE_API_KEY=\nBULKGATE_COUNTRY_CODE=\n\nAWS_ID=\nAWS_SECRET=\nAWS_BUCKET=\nAWS_BUCKET_REGION=\n\nGOOGLE_CLOUD_BUCKET=\nGOOGLE_CLOUD_KEYFILE=";
fs.appendFile(app_root + '/.env', content_env, function (err) {
    if (err) console.log(err);
});
fs.appendFile(app_root + '/.env.example', content_env, function (err) {
    if (err) console.log(err);
});

// Make Routes
fs.mkdir(app_root + '/route', (err) => { 
    if (err) { 
        return console.error(err); 
    }
    else{
        let content_route = "// Route Head\nconst express = require('express');\nconst router = express.Router();\nconst csrf = require('csurf');\nconst csrfProtection = csrf({cookie: {key: '_csrf', path: '/', httpOnly: true, sameSite: true, maxAge: 604800, secure: (process.env.APP_ENV == 'production') ? true : false}});\nconst cookieParser = require('cookie-parser');\nbodyParser = require('body-parser');\nparseForm = bodyParser.urlencoded({ extended: false });\nconst { check, validationResult } = require('express-validator');\nconst multer = require('multer');\nconst os = require('os');\nconst upload = multer({ dest: os.tmpdir() + '/nitromvc' });\n\n// Middlewares\nconst auth = require('../helpers/auth');\nconst isAdmin = require('../helpers/isAdmin');\n\n// Controllers\nconst controller = require('../controller/controller');\nconst auth_controller = require('../controller/auth.controller');\nconst admin_controller = require('../controller/admin.controller');\n\n// No CSRF Protection\nrouter.get('/api/', controller.api);\n\n// CSRF Protection\nrouter.get('/docs/', parseForm, csrfProtection, controller.docs);\nrouter.get('/', parseForm, csrfProtection, controller.index);\n\n// Auth\nrouter.get('/register/', parseForm, csrfProtection, auth_controller.register);\nrouter.post('/register/', parseForm, csrfProtection, [check('name').isString(), check('email').isEmail(), check('phone').isString(),check('phone').isLength({ min: 10, max: 10 }),\n                                                      check('password').isString(), check('password').isLength({ min: 8 })], auth_controller.register_user);\nrouter.get('/login/', csrfProtection, auth_controller.login);\nrouter.post('/login/', parseForm, csrfProtection, [check('email').isEmail(),check('password').isString(), check('password').isLength({ min: 8 })],\n                                                     auth_controller.login_user);\nrouter.get('/password/reset', parseForm, csrfProtection, auth_controller.password_reset);\nrouter.post('/password/reset', parseForm, csrfProtection, [check('email').isEmail()], auth_controller.password_reset_success);\nrouter.get('/logout/', parseForm, csrfProtection, auth_controller.logout);\nrouter.get('/reset/password/:token',parseForm, csrfProtection, [check('token').isString()],auth_controller.confirm_reset);\nrouter.post('/password/change/', parseForm, csrfProtection, [check('id').isString(),check('password').isString(), check('password').isLength({ min: 8 })], auth_controller.change_password);\n\n// User Dashboard\nrouter.get('/dashboard/', [parseForm, csrfProtection, auth], auth_controller.dashboard);\n\n// Admin\nrouter.get('/admin/', parseForm, csrfProtection, isAdmin, admin_controller.admin);\nrouter.get('/admin/users', parseForm, csrfProtection, isAdmin, admin_controller.users);\nrouter.get('/admin/user/:id', parseForm, csrfProtection, [check('id').isString()], isAdmin, admin_controller.user);\nrouter.post('/admin/user/update/', parseForm, csrfProtection, isAdmin, admin_controller.updateUser);\n\n// 404 Page\nrouter.get('*', parseForm, csrfProtection, function(req, res){\n    res.status(404).render('errors/404', { csrfToken: req.csrfToken() });\n  });\n\nmodule.exports = router;";
        fs.appendFile(app_root + '/route/app.js', content_route, function (err) {
            if (err) console.log(err);
        });     
    }
});

// Storage
fs.mkdir(app_root + '/storage/', (err) => {
    if(err) {
    console.log(err);
    }
    else{
            // Log
            fs.mkdir(app_root + '/storage/logs', (err) => {
            if(err) console.log(err);
            });
            // Public
            fs.mkdir(app_root + '/storage/public', (err) => { 
            if(err) console.log(err);
            fs.mkdir(app_root + '/storage/public/css', (err) => { 
                if(err) console.log(err);
            });
            fs.mkdir(app_root + '/storage/public/js', (err) => { 
                if(err) console.log(err);
            });
            fs.mkdir(app_root + '/storage/public/images', (err) => { 
                if(err) console.log(err);
            });
        });        
    }
});    

// Make Controller
fs.mkdir(app_root + '/controller', (err) => { 
    if (err) { 
        return console.error(err); 
    }
    else{
        let content_controller = "\"use strict\";\nconst mongoose = require('mongoose');\n\nconst csrf = require('csurf');\nconst csrfProtection = csrf({cookie: {key: '_csrf', path: '/', httpOnly: true, sameSite: true, maxAge: 604800, secure: (process.env.APP_ENV == 'production') ? true : false}});\n\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\nconst parseForm = bodyParser.urlencoded({ extended: false });\n\nconst cookieEncrypt = require('../helpers/cookieEncrypt');\n\nconst cookieConfig = {\n    httpOnly: true,\n    maxAge: 604800000,\n    signed: true,\n    sameSite: true,\n    secure: (process.env.APP_ENV == 'production') ? true : false\n};\n\nconst mail = require('../helpers/mail');\nconst { check, validationResult } = require('express-validator');\nconst nitro = require('@jaydadarkar/nitrocore');\n\n\nexports.api = (req,res) => {\n res.send('API');\n}\nexports.docs = (req,res) => {\n res.render('docs', { csrfToken: req.csrfToken() });\n}\n\n// HomePage\nexports.index = (req,res) => {\n    res.render('index', { csrfToken: req.csrfToken() });\n};";
        fs.appendFile(app_root + '/controller/controller.js', content_controller, function (err) {
            if (err) console.log(err);
        });     
        let content_auth_controller = "\"use strict\";\nconst mongoose = require('mongoose');\nconst controller = require('./controller');\nconst Users = require('../model/Users');\n\nconst route = require('../route/app');\n\nconst csrf = require('csurf');\nconst csrfProtection = csrf({cookie: {key: '_csrf', path: '/', httpOnly: true, sameSite: true, maxAge: 604800, secure: (process.env.APP_ENV == 'production') ? true : false}});\n\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\nconst parseForm = bodyParser.urlencoded({ extended: false });\n\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst crypto = require(\"crypto\");\nconst {v4: uuidv4} = require('uuid');\n\nconst cookieEncrypt = require('../helpers/cookieEncrypt');\n\nconst cookieConfig = {\n    httpOnly: true,\n    maxAge: 604800000,\n    signed: true,\n    sameSite: true,\n    secure: (process.env.APP_ENV == 'production') ? true : false\n};\n\nconst mail = require('../helpers/mail');\nconst { check, validationResult } = require('express-validator');\n\n// User Dashboard\nexports.dashboard = async (req,res) => {\n\n    const id = req.user_id;\n    const user = await Users.findOne({_id: id}, function(err,user){\n        if(!err){\n            res.render('auth/dashboard', { \n                csrfToken:  req.csrfToken(),\n                user_detail: user\n             });\n        }\n    });\n}\n\n// Register User Layout\nexports.register = (req,res,next) => {\n    if(req.signedCookies.nitromvc_session){\n        res.redirect('/dashboard');\n    }\n    else{\n        res.render('auth/register', { csrfToken: req.csrfToken() });\n    }\n}\n\n// Register User\nexports.register_user = async (req,res) => {\n    try {\n\n        const val_errors = validationResult(req);\n        if (!val_errors.isEmpty()) {\n          return res.status(422).render('errors/422', {\n              val_errors: val_errors\n            });\n        }\n        \n        // Check Email Exists\n        let exists = await Users.find({email: req.body.email});\n        if(exists.length <= 0 || exists.length == undefined){\n            var salt = bcrypt.genSaltSync(10);\n            var hash = bcrypt.hashSync(req.body.password, salt);\n            let refresh_token = uuidv4();\n    \n            const User = new Users({\n                name: req.body.name,\n                phone: req.body.phone,\n                email: req.body.email,\n                password: hash,\n                user_type: 'default',\n                refresh_token: refresh_token,\n                reset_password_requested: false,\n                reset_password_token: null,\n                reset_password_expiry: null,\n                created_at: Date.now(),\n                updated_at: Date.now()\n            });\n    \n            await User.save((err,savedUser) => {\n                if(!err){\n                    let id = String(savedUser._id);\n                    const token = jwt.sign(\n                        {\n                            _id: cookieEncrypt.encrypt(id)\n                        },\n                        process.env.JWT_APP_KEY,\n                        {\n                            expiresIn: process.env.REFRESH_JWT_INTERVAL\n                        }\n                        );\n    \n                        // Send Mail\n                        if(process.env.MAIL_SERVICE && process.env.MAIL_FROM && process.env.MAIL_USER && process.env.MAIL_PASSWORD && savedUser.email){\n                        let mailOptions = {\n                            from: process.env.MAIL_FROM,\n                            to: savedUser.email,\n                            subject: 'Thank You For Registering With NITRO MVC',\n                            html: '<h3>Hello ' + savedUser.name + ',</h3><p>You Have Successfully Registered On NITRO MVC.<br />Thanks</p>'\n                          };\n    \n                        mail.sendMail(mailOptions, function(error, info){\n                            if (error) {\n                              console.log(error);\n                            }\n                          });\n                        }\n    \n                                res.cookie('nitromvc_session', token, cookieConfig).cookie('nitromvc_refresh', cookieEncrypt.encrypt(refresh_token), cookieConfig)\n                                .render('auth/dashboard', { \n                                    csrfToken:  req.csrfToken(),\n                                    user_detail: savedUser\n                                 });\n                    }\n            });\n        }\n        else{\n            res.render('errors/messages', {val_errors: \"This Email Is Already Taken.\"});\n        }\n\n    } catch (error) {\n        res.render('errors/messages', {val_errors: error});\n    }\n}\n\n// Login User Layout\nexports.login = (req,res,next) => {\n    if(req.signedCookies.nitromvc_session){\n        res.redirect('/dashboard');\n    }\n    else{\n        res.render('auth/login', { csrfToken: req.csrfToken() });\n    }\n}\n\n// Login User\nexports.login_user = async (req,res) => {\n\n        const val_errors = validationResult(req);\n        if (!val_errors.isEmpty()) {\n          return res.status(422).render('errors/422', {\n              val_errors: val_errors\n            });\n        }\n\n        // Find User\n        const user = await Users.findOne({email: req.body.email});\n        if(!user) return res.status(400).render('errors/messages', {val_errors: 'Email Or Password Does Not Match.'});\n        const validUser = await bcrypt.compare(req.body.password,user.password);\n        if(!validUser) return res.status(400).render('errors/messages', {val_errors: 'Email Or Password Does Not Match.'});\n\n        let id = String(user._id);\n        let refresh_token = user.refresh_token;\n\n        const token = jwt.sign(\n            {\n                _id: cookieEncrypt.encrypt(id)\n            },\n            process.env.JWT_APP_KEY,\n            {\n                expiresIn: process.env.REFRESH_JWT_INTERVAL\n            }\n            );\n            // Send The Cookies\n                    res.cookie('nitromvc_session', token, cookieConfig).cookie('nitromvc_refresh', cookieEncrypt.encrypt(refresh_token), cookieConfig)\n                    .render('auth/dashboard', { \n                        csrfToken:  req.csrfToken(),\n                        user_detail: user\n                     });\n        }\n\n// Reset Password Layout\nexports.password_reset = (req,res,next) => {\n    // Check if user is logged in.\n    if(req.signedCookies.nitromvc_session){\n        res.redirect('/dashboard');\n        next();\n    }\n    else{\n        res.render('auth/password_reset', { csrfToken: req.csrfToken() });\n    }\n}\n\n// User Enters Email And Confirms Reset Password\nexports.password_reset_success = async (req,res,next) => {\n    const val_errors = validationResult(req);\n    if (!val_errors.isEmpty()) {\n      return res.status(422).render('errors/422', {\n          val_errors: val_errors\n        });\n    }\n\n    // Find User\n    const user = await Users.findOne({email: req.body.email});\n    if(!user) return res.status(400).render('errors/messages', {val_errors: 'Email Does Not Exist.'});\n\n    let hash = cookieEncrypt.encrypt(uuidv4());\n    let expiry_date = new Date;\n    // 1 Hour\n    expiry_date.setHours(expiry_date.getHours() + 1);\n\n    user.reset_password_requested = true;\n    user.reset_password_token = hash;\n    user.reset_password_expiry = expiry_date;\n    user.updated_at = Date.now();\n\n    user.save((err) => {\n        if(err){\n            res.send('Error: ' + err);\n        }\n    });\n\n    // Send Mail\n    if(process.env.MAIL_SERVICE && process.env.MAIL_FROM && process.env.MAIL_USER && process.env.MAIL_PASSWORD && user.email){\n    let mailOptions = {\n        from: process.env.MAIL_FROM,\n        to: user.email,\n        subject: 'Password Reset Request',\n        html: '<h3>Hello ' + user.name + ',</h3><p>We Have Recieved A Password Reset Request On Your Behalf</p><br /><a target=\"_blank\" href=\"'+process.env.APP_URL+'/reset/password/'+ hash +'\">Reset My Password</a><br />Not You? You Can Ignore This E-mail. No Further Action Is Required.'\n      };\n\n    mail.sendMail(mailOptions, function(error, info){\n        if (error) {\n          console.log(error);\n        }\n      });\n    }\n\n    res.status(200).render('errors/messages', {val_errors:'A Password Reset Link Has Been Sent To Your Email.'});\n}\n\n// Check The Token And Render Password Form\nexports.confirm_reset = async (req,res,next) => {\n\n    const val_errors = validationResult(req.params);\n    if (!val_errors.isEmpty()) {\n      return res.status(422).render('errors/422', {\n          val_errors: val_errors\n        });\n    }\n\n    let token = req.params.token;\n    let user_id = cookieEncrypt.decrypt(token);\n    let user = await Users.findOne({reset_password_token: token});\n    if(!user) return res.status(500).render('errors/500');\n    if(user.reset_password_requested != true) return res.status(500).render('errors/500');\n    if(user.reset_password_expiry < Date.now()) return res.status(500).render('errors/500');\n\n    res.render('auth/change_password',{id: cookieEncrypt.encrypt(user.id), csrfToken: req.csrfToken()});\n}\n\n// Post Request Save The Password\nexports.change_password = async (req,res,next) => {\n    const val_errors = validationResult(req.params);\n    if (!val_errors.isEmpty()) {\n      return res.status(422).render('errors/422', {\n          val_errors: val_errors\n        });\n    }\n\n    id = cookieEncrypt.decrypt(req.body.id);\n    let user = await Users.findOne({_id: id});\n    if(!user) return res.status(500).render('errors/500');\n\n    var salt = bcrypt.genSaltSync(10);\n    var hash = bcrypt.hashSync(req.body.password, salt);\n\n    user.password = hash;\n    user.reset_password_requested = false;\n    user.reset_password_token = null;\n    user.reset_password_expiry = null;\n    user.updated_at = Date.now();\n    user.save();\n\n    // Send Mail\n    if(process.env.MAIL_SERVICE && process.env.MAIL_FROM && process.env.MAIL_USER && process.env.MAIL_PASSWORD){\n        let mailOptions = {\n            from: process.env.MAIL_FROM,\n            to: user.email,\n            subject: 'Your Password Has Been Reset',\n            html: '<h3>Hello ' + user.name + ',</h3><p>You Have Successfully Changed Your Password.<br />Thanks.'\n          };\n    \n        mail.sendMail(mailOptions, function(error, info){\n            if (error) {\n              console.log(error);\n            }\n          });\n        }\n    \n\nres.clearCookie('nitromvc_session').clearCookie('nitromvc_refresh').redirect('/');\n}\n\n// Logout\nexports.logout = async (req,res,next) => {\n    if(req.signedCookies.nitromvc_session){\n        res.clearCookie('nitromvc_session');\n    }\n    if(req.signedCookies.nitromvc_refresh){\n        res.clearCookie('nitromvc_refresh');\n    }\n    res.status(200).redirect('/');\n}";
        fs.appendFile(app_root + '/controller/auth.controller.js', content_auth_controller, function (err) {
            if (err) console.log(err);
        });     
        let content_admin_controller = "\"use strict\";\nconst mongoose = require('mongoose');\nconst controller = require('./controller');\nconst Users = require('../model/Users');\n\nconst route = require('../route/app');\n\nconst csrf = require('csurf');\nconst csrfProtection = csrf({cookie: {key: '_csrf', path: '/', httpOnly: true, sameSite: true, maxAge: 604800, secure: (process.env.APP_ENV == 'production') ? true : false}});\n\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\nconst parseForm = bodyParser.urlencoded({ extended: false });\n\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst crypto = require('crypto');\n\nconst cookieEncrypt = require('../helpers/cookieEncrypt');\nconst { check, validationResult } = require('express-validator');\n\nconst cookieConfig = {\n    httpOnly: true,\n    maxAge: 604800000,\n    signed: true,\n    sameSite: true,\n    secure: (process.env.APP_ENV == 'production') ? true : false\n};\n\n// Admin \nexports.admin = async (req,res) => {\n let id = await req.user_id;\n if(id){\n res.render('admin/index',{csrfToken: req.csrfToken()});\n}\n}\n\n// Get All Users\nexports.users = async (req,res) => {\n    await Users.find({}, function(err,Users){\n        if(!err){\n            res.render('admin/users', {csrfToken: req.csrfToken(), users: Users});\n        }\n        else{\n            res.render('errors/messages', {val_errors: err});\n        }\n    });    \n    \n}\n\n// Get One User\nexports.user = async (req,res) => {\n    let val_errors = validationResult(req.params.id);\n    if (!val_errors.isEmpty()) {\n      return res.status(422).render('errors/422', {\n          val_errors: val_errors\n        });\n    }\n\n    let user_id = String(req.params.id);\n    await Users.findOne({_id: user_id}, async function (err, User){\n        if(!err){\n            res.render('admin/user', {csrfToken: req.csrfToken(), user: User});\n        }\n        else{\n            res.render('errors/messages', {val_errors: err});\n        }\n    });\n}\n\n// Update One User\nexports.updateUser = async (req,res) => {\n    let user_id = String(req.body.user_id);\n    await Users.findOne({_id: user_id}, async function (err, user){\n        if(!err){\n            await Users.updateOne({_id: user._id},{\n                name: req.body.name,\n                email: req.body.email,\n                phone: req.body.phone,\n                updated_at: Date.now()\n            },function(err){\n                if(err){\n                    res.render('errors/messages', {val_errors: err});\n                }\n                else{\n                    res.render('errors/messages', {val_errors: 'User Updated'});\n                }\n            });\n        }\n    });\n}";
        fs.appendFile(app_root + '/controller/admin.controller.js', content_admin_controller, function (err) {
            if (err) console.log(err);
        });     
    }
});

// Make Models
fs.mkdir(app_root + '/model', (err) => { 
    if (err) { 
        return console.error(err); 
    }
    else{
        let content_model = "const mongoose = require('mongoose');\n\nconst userSchema = mongoose.Schema({\n    name:{\n        type: String,\n        required: true,\n        min: 3,\n        max: 40\n    },\n    email:{\n        type: String,\n        required: true,\n        min: 6,\n        max: 100\n    },\n    phone:{\n        type: String,\n        required: true,\n        min: 10,\n        max: 13\n    },\n    password:{\n        type: String,\n        required: true,\n        max: 1024,\n        min: 8\n    },\n    user_type:{\n        type: String,\n        required: true\n    },\n    refresh_token:{\n        type: String,        \n    },\n    reset_password_requested:{\n        type: Boolean,        \n    },\n    reset_password_token:{\n        type: String,        \n    },\n    reset_password_expiry:{\n        type: Date,        \n    },\n    created_at:{\n        type: Date,\n        default: Date.now\n    },\n    updated_at:{\n        type: Date,\n        default: Date.now\n    }\n});\n\nmodule.exports = mongoose.model('Users', userSchema);";
        fs.appendFile(app_root + '/model/Users.js', content_model, function (err) {
            if (err) console.log(err);
        });
    }
});

// Make helpers
    fs.mkdir(app_root + '/helpers', (err) => { 
    if (err) { 
        return console.error(err); 
    }
    else{
        // Make Auth
        let content_auth = "\"use strict\";\nconst jwt = require('jsonwebtoken');\nconst cookieEncrypt = require('./cookieEncrypt');\nconst Users = require('../model/Users');\nconst {v4: uuidv4} = require('uuid');\n\nconst cookieConfig = {\n  httpOnly: true,\n  maxAge: 604800000,\n  signed: true,\n  sameSite: true,\n    secure: (process.env.APP_ENV == 'production') ? true : false\n};\n\n// Auth Middleware\nmodule.exports = async function (req,res,next){\n  let token = req.signedCookies.nitromvc_session;\n  let refresh_token = req.signedCookies.nitromvc_refresh;\n\n  if (!token) return res.status(401).render('errors/401');  \n    if (token.startsWith('Bearer ')) {\n        token = token.slice(7, token.length);\n      }\n\n     await jwt.verify(token, process.env.JWT_APP_KEY, async function(err, decoded) {\n        if (err){\n          if(req.signedCookies.nitromvc_refresh){\n          // If JWT Expires, We will use the refresh token \n           refresh_token =  cookieEncrypt.decrypt(req.signedCookies.nitromvc_refresh);\n           await Users.findOne({refresh_token: refresh_token}, async function(err,user){\n            if(err) return console.log(err);\n            if(!user) return res.status(500).render('errors/500');\n\n            // Assign A New JWT Token\n            const token = await jwt.sign(\n              {\n                  _id: cookieEncrypt.encrypt(String(user._id))\n              },\n              process.env.JWT_APP_KEY,\n              {\n                  expiresIn: process.env.REFRESH_JWT_INTERVAL\n              }\n              );\n        // New Refresh Token\n        refresh_result = uuidv4();\n        req.user_id = String(user._id);\n        res.cookie('nitromvc_session', token, cookieConfig).cookie('nitromvc_refresh', cookieEncrypt.encrypt(refresh_result), cookieConfig).status(200);\n        Users.updateOne({_id: String(user._id)},{refresh_token: refresh_result}, function(err, data) {\n          if(err) return console.log(err);\n       });\n      });\n\n        }\n        else{\n          return res.status(500).render('errors/500');\n        }\n        }\n        else{\n          req.user_id = cookieEncrypt.decrypt(decoded._id);\n          res.status(200);  \n        }\n\n      });\n    next();\n}";
        fs.appendFile(app_root + '/helpers/auth.js', content_auth, function (err) {
            if (err) console.log(err);
        });
        // Make isAdmin
        let content_isadmin = "\"use strict\";\nconst jwt = require('jsonwebtoken');\nconst Users = require('../model/Users');\nconst cookieEncrypt = require('./cookieEncrypt');\nconst {v4: uuidv4} = require('uuid');\n\nconst cookieConfig = {\n  httpOnly: true,\n  maxAge: 604800000,\n  signed: true,\n  sameSite: true,\n    secure: (process.env.APP_ENV == 'production') ? true : false\n};\n\n// Admin Middleware\n// Similar To Auth Middleware\nmodule.exports = async function (req,res,next){\n    let token = req.signedCookies.nitromvc_session;\n    if (!token) return res.status(401).render('errors/401');\n    \n    if (token.startsWith('Bearer ')) {\n        token = token.slice(7, token.length);\n      }\n\n    await jwt.verify(token, process.env.JWT_APP_KEY, async function (err, decoded) {\n      if (err){\n        if(req.signedCookies.nitromvc_refresh){\n         refresh_token =  cookieEncrypt.decrypt(req.signedCookies.nitromvc_refresh);\n         await Users.findOne({refresh_token: refresh_token}, async function(err,user){\n          if(err) return console.log(err);\n          if(!user) return res.status(500).render('errors/500');\n          // Check Admin\n          if (user.user_type != 'admin') return res.status(400).render('errors/400');\n  \n          const token = await jwt.sign(\n            {\n                _id: cookieEncrypt.encrypt(String(user._id))\n            },\n            process.env.JWT_APP_KEY,\n            {\n                expiresIn: process.env.REFRESH_JWT_INTERVAL\n            }\n            );\n      refresh_result = uuidv4();\n      req.user_id = String(user._id);\n      res.cookie('nitromvc_session', token, cookieConfig).cookie('nitromvc_refresh', cookieEncrypt.encrypt(refresh_result), cookieConfig).status(200);\n      Users.updateOne({_id: String(user._id)},{refresh_token: refresh_result}, function(err, data) {\n        if(err) return console.log(err);\n     });\n    });\n\n      }\n      else{\n        return res.status(500).render('errors/500');\n      }\n      }\n    else{\n      let id = cookieEncrypt.decrypt(String(decoded._id));\n      await Users.findById(id, function (err, user) {\n        if (!user) {\n          res.status(401).render('errors/401');\n        }\n        else {\n          if (user.user_type != 'admin') {\n          res.status(400).render('errors/400');\n        }\n        else{\n          req.user_id = user._id;\n          \n        }\n      }\n      });\n    }\n  });\nnext();    \n}";
        fs.appendFile(app_root + '/helpers/isAdmin.js', content_isadmin, function (err) {
                    if (err) console.log(err);
        });
        // Make KeyGen
        let content_keygen = "\"use strict\";\nconst fs = require('fs');\nconst crypto = require('crypto');\n\nlet configfile = '.env';\nfs.readFile(configfile, 'utf8', function (err,data) {\n   if (err) {\n     return console.log(err);\n   }\n\n   let result = '';\n   let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n   let charactersLength = characters.length;\n   for( var i = 0; i < 32; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n   }\n   let result_app_key = 'APP_KEY=' + result;\n   \n   \n   let jwt_app_key = crypto.randomBytes(16).toString('hex');\n   let result_jwt_app_key = 'JWT_APP_KEY=' + jwt_app_key;\n   \n   var replace_this = data.replace(/JWT_APP_KEY=/g, result_jwt_app_key).replace(/APP_KEY=/g, result_app_key);\n   \n   fs.writeFile(configfile, replace_this, 'utf8', function (err) {\n      if (!err){\n         console.log('APP KEYS GENERATED SUCCESSFULLY');\n      }\n      else{\n         return console.log(err);\n      }\n   });   \n   \n});";
        fs.appendFile(app_root + '/helpers/keygen.js', content_keygen, function (err) {
                    if (err) console.log(err);
        });    
        // Make CookieEncrypt
        let content_cookie = "\"use strict\";\nconst crypto = require('crypto');\nconst ENCRYPTION_KEY = process.env.APP_KEY;\nconst IV_LENGTH = 16;\n\nfunction encrypt(text) {\n    let iv = crypto.randomBytes(IV_LENGTH);\n    let cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(ENCRYPTION_KEY), iv);\n    let encrypted = cipher.update(text);\n   \n    encrypted = Buffer.concat([encrypted, cipher.final()]);\n   \n    return iv.toString('hex') + ':' + encrypted.toString('hex');\n   }\n   \n   function decrypt(text) {\n    try{\n        let textParts = text.split(':');\n        let iv = Buffer.from(textParts.shift(), 'hex');\n        let encryptedText = Buffer.from(textParts.join(':'), 'hex');\n        let decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(ENCRYPTION_KEY), iv);\n        let decrypted = decipher.update(encryptedText);\n       \n        decrypted = Buffer.concat([decrypted, decipher.final()]);\n       \n        return decrypted.toString();            \n    }\n    catch(err){\n        console.log(err);\n    }\n   }\n\nmodule.exports = { decrypt, encrypt };";
        fs.appendFile(app_root + '/helpers/cookieEncrypt.js', content_cookie, function (err) {
                    if (err) console.log(err);
        });    
        // Make Admin
        let content_admin = "\"use strict\";\nlet email = process.env.npm_config_name;\nif(email == undefined) return console.log('Email Is Missing.');\nif(email == null) return console.log('Email Is Missing.');\n\nvar MongoClient = require('mongodb').MongoClient;\nconst dotenv = require('dotenv');\ndotenv.config();\nvar url = process.env.MONGO_DATABASE_URL;\n\nMongoClient.connect(url, { useUnifiedTopology: true }, function(err, db) {\n  if (err) throw err;\n  var dbo = db.db(process.env.DB);\n  var myquery = { email: email };\n  var newvalues = { $set: {user_type: 'admin'} };\n  dbo.collection('users').findOne({email: email}, function(err,user){\n      if(user != null){\n        dbo.collection('users').updateOne(myquery, newvalues, function(err, res) {\n            if (err) throw err;\n            console.log(email + ' is now an admin.');\n            db.close();\n          });\n      }\n      else{\n          console.log('No User Found');\n          db.close();\n        }\n  });\n  \n});";
        fs.appendFile(app_root + '/helpers/makeadmin.js', content_admin, function (err) {
                    if (err) console.log(err);
        });    
        // Make Mail
        let content_mail = "\"use strict\";\nconst nodemailer = require('nodemailer');\n\nmodule.exports = nodemailer.createTransport({\n    host: process.env.MAIL_SERVICE,\n    port: process.env.MAIL_PORT,\n    auth: {\n      user: process.env.MAIL_USER,\n      pass: process.env.MAIL_PASSWORD\n    }\n  });";
        fs.appendFile(app_root + '/helpers/mail.js', content_mail, function (err) {
                    if (err) console.log(err);
        });    
    }
});

// Make Views
fs.mkdir(app_root + '/views', (err) => { 
    if (err) { 
        return console.error(err); 
    }
    else{
        let content_index = "<%- include('includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover text-center\">\n    <h1 class=\"cover-heading\">NITRO MVC</h1>\n    <p class=\"lead\">A SIMPLE MVC.</p>\n    <p class=\"lead\">\n    </p>\n  </main>\n<%- include('includes/footer'); -%>";
        fs.appendFile(app_root + '/views/index.ejs', content_index, function (err) {
            if (err) console.log(err);
        });
        let content_docs = "<%- include('includes/header'); -%>\n<main role=\"main\" class=\"inner cover\">\n<h1 class=\"cover-heading text-center\">NITRO MVC</h1>\n<p class=\"lead text-center\">A SIMPLE MVC.</p><hr /><h3>DOCUMENTATION</h3>\n<p class=\"lead\">\n<h1 id=\"nitro-mvc\">NITRO MVC</h1>\n<p>Simple MVC Framework</p>\n<div class=\"bg-dark p-2\">\n<code>\n$ npm install -g @jaydadarkar/nitromvc<br />\n$ mkdir example<br />\n$ cd example<br />\n$ nitro-init<br />\n$ npm install<br />\n$ npm run key:generate<br />\n$ npm start\n</code>\n</div>\n<h2 id=\"installation\">Installation</h2>\n<ol>\n<li>npm install -g @jaydadarkar/nitromvc (Globally install NITRO MVC).</li>\n<li>mkdir myapp (Make A Directory With Your App Name).</li>\n<li>cd myapp (Go To That Directory).</li>\n<li>nitro-init (Initialize An Empty Application).</li>\n<li>npm install (Install All The Required Dependencies).</li>\n<li>Setup ENV. Make necessary changes to .env file. (App Configuration, Mail Configuration).</li>\n<li>Connect To MongoDB (Replace DB, MONGO_DATABASE_URI, MONGO_DATABASE_URL in the env file).</li>\n<li>Setup package.json (Rename your application name and other details).</li>\n<li>npm run key:generate (Generate App Keys).</li>\n<li>npm start (Start Nodemon).</li>\n<li>Visit <a href=\"https://localhost/\">https://localhost/</a></li>\n<li>Hit nitro-help to read the docs from command line.</li>\n</ol>\n<h2 id=\"usage\">Usage</h2>\n<ol>\n<li>To Make A Controller, Hit: <code>nitro-controller --name={name_of_controller}</code>.</li>\n<li>To Make A Model, Hit: <code>nitro-model --name={name_of_model}</code>.</li>\n<li>To Make A User Admin, <code>Hit: npm run-script make:admin --name={email_of_registered_user}</code>.</li>\n<li>To Make A Role, Hit <code>nitro-auth-role --name={name_of_role}</code>. Then use is{RoleName} as a middleware in the routes.</li>\n<li>To Make Controller, Model And View, Hit: <code>nitro-mvc --name={name}</code>. This command will create a model, a controller and a view folder with create, read and read one views.</li>\n<li>To Delete Current Project, Hit <code>nitro-delete</code>.</li>\n</ol>\n<hr />\n<h4>Auth Middleware</h4>\n<p>For Authentication and Authorization, we use JWT (Json Web Tokens) so that we don't have to connect to our Database everytime for validation. We store the\nencrypted JWT in an http cookie so that our end user is not required to login again and again for every request. But we cannot use the JWT for a long\nperiod. It has to expire so that it is not misused. The JWT has user id encrypted in it. Hence, here comes the refresh token concept.\nIf your JWT expires or JWT key is changed, only then the refresh token is used to identify the user and create a new JWT for the user without requiring him\nto login again. The JWT expires after 4 hours. This can be changed in the ENV file.</p>\n<p>This middleware returns user id to the controller. Thus, you can do this:<br /><code>let user_id = await req.user_id;</code><br />The await\nkeyword is very important as it waits for the middleware to be completely executed (synchronously). You can read more about async/await on the internet. You can\nthus, use this to identify your user and perform any activity on it. <br /> <code>let loggedin_user = await Users.find({_id: user_id}, function(err,user)\n{ let email = user.email;});</code><br />You can use the above code to get the logged in user's email.</p>\n</p>\n<h4>Admin Middleware</h4>\n<p>Admin middleware performs in a similar way as to auth adding an extra layer of user type. If user.type is admin, you hit the controller. Thus you can protect\nsensitive routes with isAdmin middleware.</p>\n<h4>Auth Role Middleware</h4>\n<p>You can create a number of roles with Nitro MVC. Hit the command line with<br /><code>nitro-auth-role --name=blogger</code><br />Thus, you created a role\n\"Blogger\" and use \"isBlogger\" as a middleware in your routes.</p>\n<h4>Sending Email</h4>\n<p><code>const mail = require('../helpers/mail');<br />let mailOptions = {<br />from: process.env.MAIL_FROM,<br />to: {email_of_reciever},<br />\nsubject: 'Your Subject',<br />html: 'Your HTML Goes Here.'\n};<br /><br />mail.sendMail(mailOptions, function(error, info){<br /> if(error) console.log(error);<br />});</code><br /><br />\nThe above block of code sends an email.<br /><br /><code>if(process.env.MAIL_SERVICE && process.env.MAIL_FROM && process.env.MAIL_USER && process.env.MAIL_PASSWORD && savedUser.email)\n</code><br /><br />It is important if check if all email service credentials exists (Optional).</p>\n<h4>Sending SMS</h4>\n<p><code>const sa = require('superagent');<br />sa.post(process.env.BULKGATE_API_URL).send({<br />\n\"application_id\": process.env.BULKGATE_APP_ID,<br />\n\"application_token\": process.env.BULKGATE_API_KEY,<br />\n\"number\": user.phone,<br />\n\"text\": \"Content\",<br />\n\"country\": process.env.BULKGATE_COUNTRY_CODE<br />\n}).end(function(err, result) {if(err) console.log(err);});</code>\n<br /><br />Use the above code to send a SMS using Bulkgate.\n</p>\n<h4>Setting Cookie</h4>\n<p><code>const cookieEncrypt = require('../helpers/cookieEncrypt');<br />\nconst cookieConfig = {httpOnly: true,maxAge: 604800000,signed: true,sameSite: true,secure: (process.env.APP_ENV == 'production') ? true : false};\n<br />res.cookie('cookie_name', cookieEncrypt.encrypt(data), cookieConfig);</code>\n<br /><br />Setting Cookies is easy with express. It is important that you encrypt the cookie data. If your environment is set to \"production\" and\nyou are not using ssl, cookies will not be set. Since our cookies are signed, use <code>req.signedCookies.cookie_name</code>.<br /> Cookies are\nsent with every http request, hence it is important to keep the count low. Max cookie size varies from browser to browser (avg = 4Kb).</p>\n<h4>CSRF Tokens</h4>\n<p>\nCSRF tokens are important to prevent cross site form submissions. Pass the csrf token to the view in controller.<br />\n<code>res.render('docs', { csrfToken: req.csrfToken() });</code><br />Use the csrf in your form.<br /><code>input type=\"hidden\" name=\"_csrf\" value=\"csrfToken\"</code>\n<br />Use csrf as a middleware in your routes.<br /><code>router.post('/', parseForm, csrfProtection, controller);</code></p>\n<h4>Bcrypt Hashing</h4>\n<p><code>const bcrypt = require('bcryptjs');<br />var salt = bcrypt.genSaltSync(10);<br />var hash = bcrypt.hashSync(req.body.password, salt);</code></p>\n<h4>Crypto</h4>\n<p><code>const cookieEncrypt = require('../helpers/cookieEncrypt');<br />cookieEncrypt.encrypt(data)<br />cookieEncrypt.decrypt(data)</code></p>\n<h4>Storage</h4>\n<p>The Storage gives you a separate space away from code. Here, we have Public space (All your static assets like css, js and images go here. These are publicly accessible), Logs\n(when your application is in production mode, your logs will go here).</p>\n<h4>Basic Crud</h4>\n<p>The command <code>$nitro-mvc --name={name_of_module}</code> will create a controller, a model and a views directory with views in one go.\n<br /><br />Your Routes <br />\n<code>\nrouter.get('/create', parseForm, csrfProtection, controller_name.create);<br />\nrouter.post('/store', parseForm, csrfProtection, controller_name.store);<br />\nrouter.get('/read', parseForm, csrfProtection, controller_name.read);<br />\nrouter.get('/update/:id', parseForm, csrfProtection, controller_name.readOne);<br />\nrouter.post('/update/', parseForm, csrfProtection, controller_name.update);<br />\nrouter.get('/delete/:id', parseForm, csrfProtection, controller_name.delete);\n</code><br /><br />\nYour Controller <br />\n<code>\nconst mongoose = require('mongoose');<br />const csrf = require('csurf');<br />const csrfProtection = csrf({cookie: {key: '_csrf', path: '/', httpOnly: true, sameSite: true, maxAge: 604800, secure: (process.env.APP_ENV == 'production') ? true : false}});<br />const cookieParser = require('cookie-parser');<br />const bodyParser = require('body-parser');<br />const parseForm = bodyParser.urlencoded({ extended: false });<br />const Appointments = require('../model/Appointment');<br />const { check, validationResult } = require('express-validator');<br /><br />\nexports.create = async (req,res,next) => {<br />    res.render('create', { csrfToken: req.csrfToken() });<br />}<br /><br />\nexports.store = async (req,res,next) => {<br />    try {<br />        let val_errors = validationResult(req);<br />        if (!val_errors.isEmpty()) {<br />          return res.status(422).render('errors/422', {<br />              val_errors: val_errors<br />            });<br />        }<br /><br />\n// Initialize Model<br />        const Appointment = new Appointments({<br />            user_id: req.body.user_id,<br />            appointment_type: req.body.appointment_type,<br />            appointment_date_time: req.body.appointment_date_time,<br />            prescription: null,<br />            created_at: Date.now(),<br />            updated_at: Date.now()<br />        });<br /><br />await Appointment.save((err,savedUser) => {<br />            if(!err){<br />                res.render('errors/messages', { val_errors: 'Appointment Booked...' });<br />            }<br />        });<br />    } catch (error) {<br />        res.render('errors/messages', {val_errors: error});<br />    }<br /><br />\n}<br /><br />exports.read = async (req,res,next) => {<br /><br />await Appointments.find({}, function(err,Appointment){<br />        if(!err){<br />            res.render('read', {csrfToken: req.csrfToken(), appointments: Appointment});<br />        }<br />        else{<br />            res.render('errors/messages', {val_errors: err});<br />        }<br />    });    <br />}<br /><br />\nexports.readOne = async (req,res,next) => {<br /><br />\nlet val_errors = validationResult(req.params.id);<br />    if (!val_errors.isEmpty()) {<br />      return res.status(422).render('errors/422', {<br />          val_errors: val_errors<br />        });<br />    }<br /><br />\nlet appointment_id = String(req.params.id);<br />    await Appointments.findOne({_id: appointment_id}, async function (err, appointment){<br />        if(!err){<br />            res.render('readOne', {csrfToken: req.csrfToken(), appointment: appointment});<br />        }<br />        else{<br />            res.render('errors/messages', {val_errors: err});<br />        }<br />    });<br />}<br /><br />\nexports.update = async (req,res,next) => {<br />    let appointment_id = String(req.body.id);<br />    await Appointments.findOne({_id: appointment_id}, async function (err, appointment){<br />        if(!err){<br />            await Appointments.updateOne({_id: appointment_id},{<br />                prescription: req.body.prescription,<br />                updated_at: Date.now()<br />            },function(err){<br />                if(err){<br />                    res.render('errors/messages', {val_errors: err});<br />                }<br />                else{<br />                    res.render('errors/messages', {val_errors: 'Appointment Updated...'});<br />                }<br />            });<br />        }<br />        else{<br />            res.render('errors/messages', {val_errors: err});<br />        }<br />    });<br />}<br /><br />\nexports.delete = async (req,res,next) => {<br />    let appointment_id = String(req.body.id);<br />    await Appointments.findOne({_id: appointment_id}, async function (err, appointment){<br />        if(!err){<br />            await Appointments.deleteOne({_id: appointment_id},function(err){<br />                if(err){<br />                    res.render('errors/messages', {val_errors: err});<br />                }<br />                else{<br />                    res.render('errors/messages', {val_errors: 'Appointment Deleted...'});<br />                }<br />            });<br />        }<br />        else{<br />            res.render('errors/messages', {val_errors: err});<br />        }<br />    });<br />}\n</code>\n</p>\n<h4>Nitro Core</h4>\n<p>The Nitro Core library on installing copies bootstrap, jquery and poppers to your storage/public folder. This library also has a few functions which could make your life\neasy. You can write your custom code in style.css and main.js files.\n<br /><code>const nitro = require(@jaydadarkar/nitrocore);<br /><br />\n// ========== Strings =========<br />\nlet abc = nitro.strings.first('Hello'); // Returns H<br />\nlet def = nitro.strings.last('Hello'); // Returns o<br /><br />\n// ========== Arrays ==========<br />\nlet pqr = nitro.strings.randomSort([1,6,9,21,4]); // Returns a randomly sorted array<br />\nlet xyz = nitro.strings.min([18,4,12,8]); // Returns 4\n<br /><br />\n// ========== Storage =========<br />\n// Add middleware To The Route in route/app.js file <br />\nrouter.get('/form', parseform, csrfprotection, upload.single('input_field_name'), controller);<br />\n// Your Controller<br />\nmodule.exports.controller = async (req,res,next) => {<br />\nawait nitro.storage.put('public', req.file);  // Save A User Uploaded File To Storage/Public/Uploads<br />\n}<br />\n</code><br />For File Validations, You Can Read The Multer Docs. You Can Read About The Core Library In README of Nitro Core...</p>\n<h4>Validations</h4>\n<p>We use express validator in Nitro MVC. Hence, when you submit a form to a post route, you can perform validations by using them in the middleware.<br />\nIn your routes file<br /><code>const { check, validationResult } = require('express-validator');</code><br />\nYour route middleware<br /><code>router.post('/submitform', parseForm, csrfProtection, [check('email').isEmail()], controller.method);</code><br />\nYour controller <br /><code>const val_errors = validationResult(req);<br />if (!val_errors.isEmpty()) {<br />return res.status(422).render('errors/422', {<br />\nval_errors: val_errors<br />});<br />}\n</code><br />\nHere, if we get any errors, we send a http response 422 (unprocessable request) and pass the error to the error view.\n</p>\n<h4>Embeded JS Views</h4>\n<p>We use EJS i.e Embeded JS as a view engine in Nitro MVC. You can read about it in their docs.<br />\nTo pass values to view from controller,<br /><code>res.render('view_name', {val1: result, val2: result2});</code>\n</p>\n<h4>Production Environment</h4>\n<p>You can set the environment of your application to production in the .env file. In production environment, cookies are set to secure and logs are written to storage/logs folder.</p>\n<hr />\n<h2 id=\"contributing\">Contributing</h2>\n<p>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change or send an email.</p>\n<h2 id=\"Bugs\">Critical Bugs</h2>\n<p>Found A Bug? Great, kindly do not report it on Github. Send us an email and we will resolve it together.</p>\n<h2 id=\"thank-you\">Thank You</h2>\n<ol>\n<li>B Crypt</li>\n<li>Body Parser</li>\n<li>Cookie Parser</li>\n<li>Crypto</li>\n<li>CSURF</li>\n<li>Dot ENV</li>\n<li>EJS</li>\n<li>Express</li>\n<li>Express Validator</li>\n<li>JWT</li>\n<li>Mongoose</li>\n<li>Morgan</li>\n<li>Node Mailer</li>\n<li>Nodemon</li>\n<li>Superagent</li>\n<li>UUID</li>\n<li>YARGV</li>\n</ol>\n<h2 id=\"author\">Author</h2>\n<p><a href=\"https://jaydadarkar.com/\">Jay Dadarkar</a></p>\n<h2 id=\"license\">License</h2>\n<p><a href=\"https://choosealicense.com/licenses/mit/\">MIT</a></p>   </p>\n</main>\n<%- include('includes/footer'); -%>";
        fs.appendFile(app_root + '/views/docs.ejs', content_docs, function (err) {
            if (err) console.log(err);
        });
        fs.mkdir(app_root + '/views/errors', (err) => { 
            if (err) { 
            }
            else{
                let content_400 = "<%- include('head'); -%>\n  <main role=\"main\" class=\"inner cover text-center\">\n    <h1 class=\"cover-heading\">That's A 400.</h1>\n    <p class=\"lead\">Sorry, But Do Not Have Access Over Here.</p>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/errors/400.ejs', content_400, function (err) {
                    if (err) console.log(err);
                });
                let content_401 = "<%- include('head'); -%>\n  <main role=\"main\" class=\"inner cover text-center\">\n    <h1 class=\"cover-heading\">That's A 401.</h1>\n    <p class=\"lead\">You Are Not Authorized To Be Here.</p>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/errors/401.ejs', content_401, function (err) {
                    if (err) console.log(err);
                });
                let content_404 = "<%- include('head'); -%>\n  <main role=\"main\" class=\"inner cover text-center\">\n    <h1 class=\"cover-heading\">That's A 404.</h1>\n    <p class=\"lead\">We Could Not Find The Page You Were Looking For.</p>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/errors/404.ejs', content_404, function (err) {
                    if (err) console.log(err);
                });
                let content_422 = "<%- include('head'); -%>\n  <main role=\"main\" class=\"inner cover text-center\">\n    <h1 class=\"cover-heading\">That's A 422.</h1>\n    <p class=\"lead\">This Request Is Unprocessable.</p>\n    <% val_errors.errors.forEach(function (val_error) { %>\n        <p class=\"lead\"><%= val_error.msg %> for <%= val_error.param %>.</p>\n    <% }) %>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/errors/422.ejs', content_422, function (err) {
                    if (err) console.log(err);
                });
                let content_500 = "<%- include('head'); -%>\n  <main role=\"main\" class=\"inner cover text-center\">\n    <h1 class=\"cover-heading\">That's A 500.</h1>\n    <p class=\"lead\">Some Error Occured.</p>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/errors/500.ejs', content_500, function (err) {
                    if (err) console.log(err);
                });
                let content_head = "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    <meta name=\"description\" content=\"A Simple MVC.\">\n    <meta name=\"author\" content=\"Jay Dadarkar\">\n    <title>NITRO MVC BY JAY DADARKAR</title>\n\n    <!-- Bootstrap core CSS -->\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n  </head>\n  <body>\n\n    \n\n    <div class=\"cover-container d-flex w-100 h-100 p-3 mx-auto flex-column\">\n      <nav class=\"navbar navbar-expand-lg navbar-dark fixed-top bg-success\">\n        <a class=\"d-block d-lg-none navbar-brand\" href=\"<%- process.env.APP_URL %>\"><%- process.env.APP_NAME %></a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo01\" aria-controls=\"navbarTogglerDemo01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\n          <a class=\"d-none d-lg-block navbar-brand\" href=\"<%- process.env.APP_URL %>\"><%- process.env.APP_NAME %></a>\n          <ul class=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n            <li class=\"nav-item\">\n              <a class=\"nav-link active\" href=\"<%- process.env.APP_URL %>\">HOME</a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link active\" href=\"<% process.env.APP_URL %>/docs/\">DOCUMENTATION</a>\n            </li>\n</ul>\n          <ul class=\"navbar-nav mr-0 mt-2 mt-lg-0\">\n            <li class=\"nav-item dropdown\">\n              <a class=\"nav-link dropdown-toggle active\" href=\"#\" id=\"navbarDropdownMenuLink\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                MY ACCOUNT\n              </a>\n              <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/login/\">LOGIN</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/register/\">REGISTER</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/dashboard\">DASHBOARD</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/admin\">ADMIN</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/logout\">LOGOUT</a>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <br /><br />";
                fs.appendFile(app_root + '/views/errors/head.ejs', content_head, function (err) {
                    if (err) console.log(err);
                });
                let content_messages = "<%- include('head'); -%>\n  <main role=\"main\" class=\"inner cover text-center\">\n    <h1 class=\"cover-heading\">Flash Message.</h1>\n        <p class=\"lead\"><%= val_errors %>.</p>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/errors/messages.ejs', content_messages, function (err) {
                    if (err) console.log(err);
                });
            }
        });
        fs.mkdir(app_root + '/views/includes', (err) => { 
            if (err) { 
                return console.error(err);
            }
            else{
                let content_header = "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    <meta name=\"description\" content=\"A Simple MVC.\">\n    <meta name=\"author\" content=\"Jay Dadarkar\">\n    <title>NITRO MVC BY JAY DADARKAR</title>\n\n    <!-- Bootstrap core CSS -->\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\" >\n    <!-- CSRF Token -->\n    <meta name=\"csrf-token\" content=\"<% csrfToken %>\"/>\n  </head>\n  <body>\n\n    <div class=\"cover-container d-flex w-100 h-100 p-3 mx-auto flex-column\">\n      <nav class=\"navbar navbar-expand-lg navbar-dark fixed-top bg-success\">\n        <a class=\"d-block d-lg-none navbar-brand\" href=\"<%- process.env.APP_URL %>\"><%- process.env.APP_NAME %></a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo01\" aria-controls=\"navbarTogglerDemo01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\n          <a class=\"d-none d-lg-block navbar-brand\" href=\"<%- process.env.APP_URL %>\"><%- process.env.APP_NAME %></a>\n          <ul class=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n            <li class=\"nav-item\">\n              <a class=\"nav-link active\" href=\"<%- process.env.APP_URL %>\">HOME</a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link active\" href=\"<% process.env.APP_URL %>/docs/\">DOCUMENTATION</a>\n            </li>\n</ul>\n          <ul class=\"navbar-nav mr-0 mt-2 mt-lg-0\">\n            <li class=\"nav-item dropdown\">\n              <a class=\"nav-link dropdown-toggle active\" href=\"#\" id=\"navbarDropdownMenuLink\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                MY ACCOUNT\n              </a>\n              <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/login/\">LOGIN</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/register/\">REGISTER</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/dashboard\">DASHBOARD</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/admin\">ADMIN</a>\n                <a class=\"dropdown-item\" href=\"<% process.env.APP_URL %>/logout\">LOGOUT</a>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <br /><br />";
                fs.appendFile(app_root + '/views/includes/header.ejs', content_header, function (err) {
                    if (err) console.log(err);
                });
                let content_footer = "<footer class=\"mastfoot text-center mt-auto\">\n    <div class=\"inner\">\n      <p>NITRO MVC by <a href=\"https://jaydadarkar.com/\">Jay Dadarkar</a>.</p>\n    </div>\n  </footer>\n</div>\n\n<script src=\"/js/jquery.min.js\"></script>\n<script src=\"/js/popper.min.js\"></script>\n<script src=\"/js/bootstrap.min.js\"></script>\n</body>\n</html>";
                fs.appendFile(app_root + '/views/includes/footer.ejs', content_footer, function (err) {
                    if (err) console.log(err);
                });                
            }
        });
        fs.mkdir(app_root + '/views/auth', (err) => { 
            if (err) { 
                return console.error(err);
            }
            else{
                let content_dashboard = "<%- include('../includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover\">\n    <h1 class=\"cover-heading text-center\">DASHBOARD</h1>\n    <div class=\"row text-center\">\n    <div class=\"col-12\">\n      <p class=\"lead\">\n        User Id: <%- user_detail._id %><br />\n        Name: <%- user_detail.name %><br />\n        Email: <%- user_detail.email %><br />\n        User Role: <%- user_detail.user_type %><br />\n      </p>  \n    </div>\n  </div>\n    </div>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/auth/dashboard.ejs', content_dashboard, function (err) {
                    if (err) console.log(err);
                });
                let content_change_password = "<%- include('../includes/header'); -%>\n  <main role=\"main\" class=\"inner cover\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-12 col-lg-4\">\n        <h1 class=\"cover-heading text-center\">ENTER NEW PASSWORD</h1>\n        <p class=\"lead\">\n            <form action=\"<% process.env.APP_URL %>/password/change/\" method=\"POST\">\n              <input type=\"hidden\" name=\"id\" value=\"<%- id %>\">\n              <input type=\"hidden\" name=\"_csrf\" value=\"<%- csrfToken %>\">\n                <div class=\"form-group\">\n                    <label for=\"password\">Password</label>\n                    <input name=\"password\" type=\"password\" class=\"form-control\" id=\"password\" aria-describedby=\"password\" placeholder=\"Enter Password\">\n                </div>\n                <div class=\"text-center\">\n                  <button class=\"btn btn-success\" type=\"submit\">Reset Password</button>\n                </div>\n              </form>\n        </p>\n      </div>\n    </div>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/auth/change_password.ejs', content_change_password, function (err) {
                    if (err) console.log(err);
                });
                let content_login = "<%- include('../includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-12 col-lg-4\">\n        <h1 class=\"cover-heading text-center\">LOGIN</h1>\n        <p class=\"lead\">\n            <form action=\"<% process.env.APP_URL %>/login/\" method=\"POST\">\n              <input type=\"hidden\" name=\"_csrf\" value=\"<%- csrfToken %>\">\n                <div class=\"form-group\">\n                    <label for=\"email\">Email</label>\n                    <input name=\"email\" type=\"email\" class=\"form-control\" id=\"email\" aria-describedby=\"email\" placeholder=\"Enter Email\">\n                    <small id=\"email\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"password\">Password</label>\n                    <input name=\"password\" type=\"password\" class=\"form-control\" id=\"password\" aria-describedby=\"password\" placeholder=\"Enter Password\">\n                </div>\n                <div class=\"text-center\">\n                  <a href=\"/register/\">New User? Register</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n                  <a href=\"/password/reset/\">Forgot Password</a>\n                  <br />\n                  <br />\n                  <button class=\"btn btn-success\" type=\"submit\">Login</button>\n                </div>\n              </form>\n        </p>    \n      </div>\n    </div>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/auth/login.ejs', content_login, function (err) {
                    if (err) console.log(err);
                });
                let content_password_reset = "<%- include('../includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-12 col-lg-4\">\n        <h1 class=\"cover-heading text-center\">RESET PASSWORD</h1>\n        <p class=\"lead\">\n            <form action=\"<% process.env.APP_URL %>/password/reset\" method=\"POST\">\n              <input type=\"hidden\" name=\"_csrf\" value=\"<%- csrfToken %>\">\n                <div class=\"form-group\">\n                    <label for=\"email\">Email</label>\n                    <input name=\"email\" type=\"email\" class=\"form-control\" id=\"email\" aria-describedby=\"email\" placeholder=\"Enter Email\">\n                    <small id=\"email\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                </div>\n                <div class=\"text-center\">\n                  <button class=\"btn btn-success\" type=\"submit\">Reset Password</button>\n                  <p>(Send Me An Email With Password Reset Link)</p>  \n                </div>\n              </form>\n        </p>\n        </div>\n      </div>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/auth/password_reset.ejs', content_password_reset, function (err) {
                    if (err) console.log(err);
                });
                let content_register = "<%- include('../includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-12 col-lg-4\">\n        <h1 class=\"cover-heading text-center\">REGISTER</h1>\n        <p class=\"lead\">\n            <form action=\"<% process.env.APP_URL %>/register/\" method=\"POST\">\n              <input type=\"hidden\" name=\"_csrf\" value=\"<%- csrfToken %>\">\n\n                <div class=\"form-group\">\n                    <label for=\"name\">Name</label>\n                    <input required name=\"name\" type=\"text\" class=\"form-control\" id=\"name\" aria-describedby=\"name\" placeholder=\"Enter Name\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"phone\">Phone</label>\n                    <input required name=\"phone\" type=\"number\" class=\"form-control\" id=\"phone\" aria-describedby=\"phone\" placeholder=\"Enter Phone\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"email\">Email</label>\n                    <input required name=\"email\" type=\"email\" class=\"form-control\" id=\"email\" aria-describedby=\"email\" placeholder=\"Enter Email\">\n                    <small id=\"email\" class=\"form-text text-muted\">We'll never share your email / phone with anyone else.</small>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"password\">Password</label>\n                    <input required name=\"password\" type=\"password\" class=\"form-control\" id=\"password\" aria-describedby=\"password\" placeholder=\"Enter Password\">\n                </div>\n                <div class=\"text-center\">\n                  <a href=\"/login/\">Already A User? Login</a>\n                  <br />\n                  <br />\n                  <button class=\"btn btn-success\" type=\"submit\">Register</button>\n                </div>\n              </form>\n        </p>\n      </div>\n    </div>\n  </main>\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/auth/register.ejs', content_register, function (err) {
                    if (err) console.log(err);
                });                                        
            }
        });
        fs.mkdir(app_root + '/views/admin', (err) => { 
            if (err) { 
                return console.error(err);
            }
            else{
                let content_admin = "<%- include('../includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover text-center\">\n    <%- include('adminnav'); -%>\n\n<%- include('../includes/footer'); -%>";
                fs.appendFile(app_root + '/views/admin/index.ejs', content_admin, function (err) {
                    if (err) console.log(err);
                });        
            }
            let content_admin_nav = "<div class=\"text-center\">\n    <a href=\"/admin/users\" class=\"btn btn-dark\">USERS</a>\n</div>\n<hr />";
            fs.appendFile(app_root + '/views/admin/adminnav.ejs', content_admin_nav, function (err) {
                if (err) console.log(err);
            });
            let content_user = "<%- include('../includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover\">\n    <%- include('adminnav'); -%>\n    <h1 class=\"cover-heading text-center\">UPDATE USER</h1>\n    <div class=\"row justify-content-center\">\n      <div class=\"col-4\">\n        <p class=\"lead\">\n          <form action=\"<% process.env.APP_URL %>/admin/user/update\" method=\"POST\">\n            <input type=\"hidden\" name=\"_csrf\" value=\"<%- csrfToken %>\">\n            <input name=\"user_id\" type=\"hidden\" value=\"<%- user._id %>\">\n              <div class=\"form-group\">\n                  <label for=\"name\">User Name</label>\n                  <input required name=\"name\" type=\"text\" class=\"form-control\" id=\"name\" aria-describedby=\"name\" placeholder=\"Enter Name\" value=\"<%- user.name %>\">\n              </div>\n              <div class=\"form-group\">\n                  <label for=\"email\">Email</label>\n                  <input required name=\"email\" type=\"text\" class=\"form-control\" id=\"email\" aria-describedby=\"email\" placeholder=\"Enter Email\" value=\"<%- user.email %>\">\n              </div>\n              <div class=\"form-group\">\n                  <label for=\"phone\">Phone</label>\n                  <input required name=\"phone\" type=\"text\" class=\"form-control\" id=\"phone\" aria-describedby=\"phone\" placeholder=\"Enter Phone\" value=\"<%- user.phone %>\">\n              </div>\n              <br />\n              <div class=\"text-center\">\n                <button class=\"btn btn-success\" type=\"submit\">Update User</button>\n              </div>\n            </form>\n      </p>  \n      </div>\n    </div>\n  </main>\n<%- include('../includes/footer'); -%>";
            fs.appendFile(app_root + '/views/admin/user.ejs', content_user, function (err) {
                if (err) console.log(err);
            });
            let content_users = "<%- include('../includes/header'); -%>\n\n  <main role=\"main\" class=\"inner cover text-center\">\n    <%- include('adminnav'); -%>\n    <h1>USERS</h1>\n    <table class=\"table table-bordered text-dark table-responsive\">\n        <tr>\n            <th>USER ID</th>\n            <th>NAME</th>\n            <th>PHONE</th>\n            <th>EMAIL</th>\n            <th>TYPE</th>\n            <th>CREATED AT</th>\n            <th>UPDATED AT</th>\n        </tr>\n        <% users.forEach(function (user) { %>\n            <tr>\n                <td><a href=\"<% process.env.APP_URL %>/admin/user/<%= user._id %>\"><%= user._id %></a></td>\n                <td><%= user.name %></td>\n                <td><%= user.phone %></td>\n                <td><%= user.email %></td>\n                <td><%= user.user_type %></td>\n                <td><%= user.created_at %></td>\n                <td><%= user.updated_at %></td>\n            </tr>\n        <% }) %>\n    </table>\n  </main>\n<%- include('../includes/footer'); -%>";
            fs.appendFile(app_root + '/views/admin/users.ejs', content_users, function (err) {
                if (err) console.log(err);
            });
        });
    }
});